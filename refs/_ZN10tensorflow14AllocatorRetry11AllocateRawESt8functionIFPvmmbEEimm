<dec f='tensorflow/tensorflow/core/common_runtime/allocator_retry.h' l='38' type='void * tensorflow::AllocatorRetry::AllocateRaw(std::function&lt;void *(size_t, size_t, bool)&gt; alloc_func, int max_millis_to_wait, size_t alignment, size_t bytes)'/>
<def f='tensorflow/tensorflow/core/common_runtime/allocator_retry.cc' l='26' ll='56' type='void * tensorflow::AllocatorRetry::AllocateRaw(std::function&lt;void *(size_t, size_t, bool)&gt; alloc_func, int max_millis_to_wait, size_t alignment, size_t num_bytes)'/>
<doc f='tensorflow/tensorflow/core/common_runtime/allocator_retry.h' l='30'>// Call &apos;alloc_func&apos; to obtain memory.  On first call,
  // &apos;verbose_failure&apos; will be false.  If return value is nullptr,
  // then wait up to &apos;max_millis_to_wait&apos; milliseconds, retrying each
  // time a call to DeallocateRaw() is detected, until either a good
  // pointer is returned or the deadline is exhausted.  If the
  // deadline is exhausted, try one more time with &apos;verbose_failure&apos;
  // set to true.  The value returned is either the first good pointer
  // obtained from &apos;alloc_func&apos; or nullptr.</doc>
<use f='tensorflow/tensorflow/core/common_runtime/bfc_allocator.cc' l='198' u='c' c='_ZN10tensorflow12BFCAllocator11AllocateRawEmm'/>
