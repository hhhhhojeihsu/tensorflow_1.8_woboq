<dec f='tensorflow/tensorflow/compiler/xla/service/heap_simulator.h' l='107' type='static StatusOr&lt;xla::HeapSimulator::Result&gt; xla::HeapSimulator::Run(std::unique_ptr&lt;HeapAlgorithm&gt; algorithm, const xla::HloComputation &amp; computation, const std::vector&lt;const HloInstruction *&gt; &amp; instruction_sequence, const xla::TuplePointsToAnalysis &amp; points_to_analysis, const LogicalBuffer::SizeFunction &amp; size_fn, const xla::HeapSimulator::Options &amp; options = xla::HeapSimulator::Options())'/>
<use f='tensorflow/tensorflow/compiler/xla/service/buffer_assignment.cc' l='1218' u='c' c='_ZN3xla14BufferAssigner35AssignBuffersWithSequentialOrderingERKN10tensorflow3gtl7FlatMapIPKNS_14HloComputationENS2_7FlatSetIPKNS_13LogicalBufferENS1_41354386'/>
<doc f='tensorflow/tensorflow/compiler/xla/service/heap_simulator.h' l='103'>// Same as above, but runs on a single computation. The &apos;instruction_sequence&apos;
  // must contain a topologically-consistent total ordering of all instructions
  // in the computation. The result is invalid if instructions are not run in
  // exactly this sequence.</doc>
<def f='tensorflow/tensorflow/compiler/xla/service/heap_simulator.cc' l='46' ll='56' type='static StatusOr&lt;HeapSimulator::Result&gt; xla::HeapSimulator::Run(std::unique_ptr&lt;HeapAlgorithm&gt; algorithm, const xla::HloComputation &amp; computation, const std::vector&lt;const HloInstruction *&gt; &amp; instruction_sequence, const xla::TuplePointsToAnalysis &amp; points_to_analysis, const LogicalBuffer::SizeFunction &amp; size_fn, const xla::HeapSimulator::Options &amp; options = xla::HeapSimulator::Options())'/>
<doc f='tensorflow/tensorflow/compiler/xla/service/heap_simulator.cc' l='45'>/*static*/</doc>
<use f='tensorflow/tensorflow/compiler/xla/service/hlo_scheduling.cc' l='350' u='c' c='_ZN3xla12_GLOBAL__N_127MinimumMemoryForComputationERKNS_14HloComputationERKSt6vectorIPKNS_14HloInstructionESaIS7_EERKNS_21TuplePointsToAnalysisERKSt8f11370781'/>
