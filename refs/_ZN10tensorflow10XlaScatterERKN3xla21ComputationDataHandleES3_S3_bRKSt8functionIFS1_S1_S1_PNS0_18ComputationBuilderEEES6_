<dec f='tensorflow/tensorflow/compiler/tf2xla/lib/scatter.h' l='42' type='xla::StatusOr&lt;xla::ComputationDataHandle&gt; tensorflow::XlaScatter(const xla::ComputationDataHandle &amp; buffer, const xla::ComputationDataHandle &amp; updates, const xla::ComputationDataHandle &amp; indices, bool indices_are_vectors, const std::function&lt;xla::ComputationDataHandle (xla::ComputationDataHandle, xla::ComputationDataHandle, xla::ComputationBuilder *)&gt; &amp; combiner, xla::ComputationBuilder * builder)'/>
<use f='tensorflow/tensorflow/compiler/tf2xla/kernels/scatter_nd_op.cc' l='111' u='c' c='_ZN10tensorflow12_GLOBAL__N_111ScatterNdOp7CompileEPNS_18XlaOpKernelContextE'/>
<doc f='tensorflow/tensorflow/compiler/tf2xla/lib/scatter.h' l='27'>// Builds an XLA computation that performs a scatter operation on `buffer`,
// returning an updated buffer.
// For each i0, i1, ..., sets
// buffer[indices[i0, i1, ...], ...] := updates[i0, i1, ...]
//
// If `indices_are_vectors` is false, then each index in indices is a scalar,
// and the shape of `indices` must be a prefix of the shape of updates.
// Otherwise, `indices_are_vectors`, then indices are multidimensional and the
// minor dimension of `indices` represents a vector of indices.
//
// If any indices are negative, the corresponding update is discarded.
//
// If a `combiner` is provided, updates are combined with the existing values in
// the buffer using the combiner function. Otherwise, the updates replace the
// existing values. The order of updates is implementation-defined.</doc>
<use f='tensorflow/tensorflow/compiler/tf2xla/kernels/segment_reduction_ops.cc' l='76' u='c' c='_ZN10tensorflow12_GLOBAL__N_118UnsortedSegmentSum7CompileEPNS_18XlaOpKernelContextE'/>
<def f='tensorflow/tensorflow/compiler/tf2xla/lib/scatter.cc' l='33' ll='190' type='xla::StatusOr&lt;xla::ComputationDataHandle&gt; tensorflow::XlaScatter(const xla::ComputationDataHandle &amp; buffer, const xla::ComputationDataHandle &amp; updates, const xla::ComputationDataHandle &amp; indices, bool indices_are_vectors, const std::function&lt;xla::ComputationDataHandle (xla::ComputationDataHandle, xla::ComputationDataHandle, xla::ComputationBuilder *)&gt; &amp; combiner, xla::ComputationBuilder * builder)'/>
