<dec f='tensorflow/tensorflow/contrib/lite/toco/graph_transformations/remove_trivial_passthrough.h' l='52' type='bool toco::RemoveTrivialPassthroughOp(toco::GraphTransformation * transformation, toco::Model * model, std::size_t op_index)'/>
<use f='tensorflow/tensorflow/contrib/lite/toco/graph_transformations/dequantize.cc' l='205' u='c' c='_ZN4toco10Dequantize3RunEPNS_5ModelEm'/>
<doc f='tensorflow/tensorflow/contrib/lite/toco/graph_transformations/remove_trivial_passthrough.h' l='23'>// A &quot;passthrough op&quot; is an op that satisfies the following conditions:
//   1. One of its inputs is (per the semantics of that op) its &quot;main input&quot;
//      for some notion of &quot;main input&quot; that is operator-specific; for example,
//      for a Reshape op, the main input is the array being reshaped, not the
//      other input which gives the new shape.
//   2. It has exactly one output.
//   3. It forwards exactly its main input to its single output.
//
// Examples include:
//   1. TensorFlow Identity ops. (Have one input).
//   2. TensorFlow Reshape ops when the input and output shapes agree.
//   3. Any binary operator, one of whose two inputs is a constant and is the
//      neutral value for that operation. For example, a binary Add operator
//      where one of its inputs is a constant array filled with zeros.
//
// A passthrough op is &quot;trivial&quot; and can be removed when it is possible to
// discard either its main input or output array, rerouting any
// edge involving it to the other of these two arrays.
//
// It is only possible to discard such an array if it is not explicitly
// designated as a global input/output array of the graph, e.g. the model&apos;s
// input arrays, output arrays, and any array involved in a RNN back-edge
// specified by the model.
//
// This function does not check that the given operator is a passthrough op:
// that&apos;s the responsibility of the caller.
// Given that it is a passthrough op, this function checks whether it is trivial
// and then discards it and returns true, or, if it&apos;s not trivial (if neither
// the input nor the output may be discarded), returns false.</doc>
<use f='tensorflow/tensorflow/contrib/lite/toco/graph_transformations/drop_fake_quant.cc' l='53' u='c' c='_ZN4toco13DropFakeQuant3RunEPNS_5ModelEm'/>
<use f='tensorflow/tensorflow/contrib/lite/toco/graph_transformations/merge_reshape_into_preceding_transpose.cc' l='174' u='c' c='_ZN4toco34MergeReshapeIntoPrecedingTranspose3RunEPNS_5ModelEm'/>
<use f='tensorflow/tensorflow/contrib/lite/toco/graph_transformations/propagate_activation_function_into_constants.cc' l='118' u='c' c='_ZN4toco40PropagateActivationFunctionIntoConstants3RunEPNS_5ModelEm'/>
<use f='tensorflow/tensorflow/contrib/lite/toco/graph_transformations/remove_tensorflow_identity.cc' l='35' u='c' c='_ZN4toco24RemoveTensorFlowIdentity3RunEPNS_5ModelEm'/>
<use f='tensorflow/tensorflow/contrib/lite/toco/graph_transformations/remove_trivial_binary.cc' l='110' u='c' c='_ZN4toco27RemoveTrivialBinaryOperator3RunEPNS_5ModelEm'/>
<use f='tensorflow/tensorflow/contrib/lite/toco/graph_transformations/remove_trivial_concatenation.cc' l='37' u='c' c='_ZN4toco26RemoveTrivialConcatenation3RunEPNS_5ModelEm'/>
<def f='tensorflow/tensorflow/contrib/lite/toco/graph_transformations/remove_trivial_passthrough.cc' l='50' ll='134' type='bool toco::RemoveTrivialPassthroughOp(toco::GraphTransformation * transformation, toco::Model * model, std::size_t op_index)'/>
<use f='tensorflow/tensorflow/contrib/lite/toco/graph_transformations/remove_trivial_reshape.cc' l='89' u='c' c='_ZN4toco20RemoveTrivialReshape3RunEPNS_5ModelEm'/>
<use f='tensorflow/tensorflow/contrib/lite/toco/graph_transformations/remove_trivial_slice.cc' l='66' u='c' c='_ZN4toco18RemoveTrivialSlice3RunEPNS_5ModelEm'/>
<use f='tensorflow/tensorflow/contrib/lite/toco/graph_transformations/resolve_squeeze_attributes.cc' l='45' u='c' c='_ZN4toco24ResolveSqueezeAttributes3RunEPNS_5ModelEm'/>
