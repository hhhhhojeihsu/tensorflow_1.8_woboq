<def f='include/python3.5m/object.h' l='141' ll='145'/>
<size>24</size>
<doc f='include/python3.5m/object.h' l='122'>/* This structure helps managing static strings. The basic usage goes like this:
   Instead of doing

       r = PyObject_CallMethod(o, &quot;foo&quot;, &quot;args&quot;, ...);

   do

       _Py_IDENTIFIER(foo);
       ...
       r = _PyObject_CallMethodId(o, &amp;PyId_foo, &quot;args&quot;, ...);

   PyId_foo is a static variable, either on block level or file level. On first
   usage, the string &quot;foo&quot; is interned, and the structures are linked. On interpreter
   shutdown, all strings are released (through _PyUnicode_ClearStaticStrings).

   Alternatively, _Py_static_string allows choosing the variable name.
   _PyUnicode_FromId returns a borrowed reference to the interned string.
   _PyObject_{Get,Set,Has}AttrId are __getattr__ versions using _Py_Identifier*.
*/</doc>
<mbr r='_Py_Identifier::next' o='0' t='struct _Py_Identifier *'/>
<mbr r='_Py_Identifier::string' o='64' t='const char *'/>
<mbr r='_Py_Identifier::object' o='128' t='PyObject *'/>
