<def f='tensorflow/tensorflow/compiler/xla/service/llvm_ir/llvm_loop.h' l='116' type='llvm::BasicBlock * xla::llvm_ir::ForLoop::GetPreheaderBasicBlock() const'/>
<doc f='tensorflow/tensorflow/compiler/xla/service/llvm_ir/llvm_loop.h' l='79'>// The names of the blocks follow LLVM&apos;s conventions. Control flow amongst the
  // blocks for the example C code looks like:
  //
  //   for (int i = 0; i &lt; n; ++i) {
  //     do_stuff(i);
  //   }
  //
  //      +--------------+
  //      | preheader BB |
  //      |     i = 0    |
  //      +--------------+
  //              |
  //              V
  //      +-------------+
  //      |  header BB  |&lt;-+
  //      | if i &lt; n:   |  |
  //      |   goto body |  |
  //      | else:       |  |
  //      |   goto exit |  |
  //      +-------------+  |
  //            | |        |
  //   +--------+ |        |
  //   |          V        |
  //   |  +-------------+  |
  //   |  |   body BB   |  |
  //   |  | dostuff(i)  |--+
  //   |  | ++i         |
  //   |  +-------------+
  //   |
  //   |  +-------------+
  //   +-&gt;|   exit BB   |
  //      +-------------+
  //
  // Caller-emitted code to execute within the loop should be placed within the
  // &quot;body&quot; basic block.
  //
  // Return pointers to various blocks in the loop.</doc>
<use f='tensorflow/tensorflow/compiler/xla/service/cpu/dot_op_emitter.cc' l='799' u='c' c='_ZN3xla3cpu12DotOpEmitter4EmitEv'/>
<use f='tensorflow/tensorflow/compiler/xla/service/cpu/dot_op_emitter.cc' l='807' u='c' c='_ZN3xla3cpu12DotOpEmitter4EmitEv'/>
<use f='tensorflow/tensorflow/compiler/xla/service/elemental_ir_emitter.cc' l='1827' u='c' c='_ZNK3xla18ElementalIrEmitter20MakeElementGeneratorEPKNS_14HloInstructionERKSt13unordered_mapIS3_St8functionIFNS_8StatusOrIPN4llvm5ValueEEERKNS_7llvm_i753933'/>
<use f='tensorflow/tensorflow/compiler/xla/service/llvm_ir/llvm_loop.cc' l='203' u='c' c='_ZN3xla7llvm_ir11ForLoopNest7AddLoopEN10tensorflow11StringPieceEPN4llvm5ValueES6_S6_bb'/>
