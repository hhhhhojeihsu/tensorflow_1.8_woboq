<dec f='tensorflow/tensorflow/compiler/xla/shape_util.h' l='495' type='static xla::Shape xla::ShapeUtil::StripDegenerateDimensions(const xla::Shape &amp; shape)'/>
<doc f='tensorflow/tensorflow/compiler/xla/shape_util.h' l='477'>// Removes all degenerate dimensions (size one) from the given shape. The
  // stripped minor_to_major preserves the relative ordering of non-degenerate
  // dimensions. The stripped shape has the property that the underlying
  // representation (bits in memory) for the stripped shape is the same as the
  // original shape modulo padding. Examples:
  //
  // input shape:    F32 [1, 2, 1], minor_to_major = {0, 1, 2}
  // stripped shape: F32 [2], minor_to_major = {0}
  //
  // input shape:    F32 [6, 1, 5], minor_to_major = {2, 0, 1}
  // stripped shape: F32 [6, 5], minor_to_major = {1, 0}
  //
  // input shape:    F32 [1, 7, 1, 6, 5, 1], minor_to_major = {0, 2, 5, 4, 3, 1}
  // stripped shape: F32 [7, 6, 5], minor_to_major = {0, 2, 1}
  //
  // input shape:    F32 [1, 1], minor_to_major = {0, 1}
  // stripped shape: F32 [], minor_to_major = {}
  // Precondition: !ShapeUtil::IsOpaque(shape) &amp;&amp; !ShapeUtil::IsTuple(shape)</doc>
<def f='tensorflow/tensorflow/compiler/xla/shape_util.cc' l='853' ll='904' type='static xla::Shape xla::ShapeUtil::StripDegenerateDimensions(const xla::Shape &amp; shape)'/>
<doc f='tensorflow/tensorflow/compiler/xla/shape_util.cc' l='853'>/* static */</doc>
