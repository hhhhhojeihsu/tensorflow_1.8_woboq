<def f='tensorflow/tensorflow/stream_executor/dnn.h' l='1053' ll='1067' type='bool perftools::gputools::dnn::DnnSupport::DoFusedConvolve(perftools::gputools::Stream * stream, const dnn::BatchDescriptor &amp; conv_input_descriptor, const DeviceMemory&lt;double&gt; &amp; conv_input_data, double conv_input_scale, const dnn::FilterDescriptor &amp; filter_descriptor, const DeviceMemory&lt;double&gt; &amp; filter_data, const dnn::ConvolutionDescriptor &amp; convolution_descriptor, const DeviceMemory&lt;double&gt; &amp; side_input_data, double side_input_scale, const dnn::BatchDescriptor &amp; bias_descriptor, const DeviceMemory&lt;double&gt; &amp; biases, dnn::ActivationMode activation_mode, const dnn::BatchDescriptor &amp; output_descriptor, DeviceMemory&lt;double&gt; * output_data, perftools::gputools::ScratchAllocator * scratch_allocator, const dnn::AlgorithmConfig &amp; algorithm_config, dnn::ProfileResult * output_profile_result)'/>
<doc f='tensorflow/tensorflow/stream_executor/dnn.h' l='1001'>// Enqueues a fused convolution operation onto the stream.
  // We provide several variants with different types for inputs, biases and
  // scaling parameters.
  //
  // Arguments (all borrowed):
  //  stream: borrowed pointer to the stream that the &apos;convolve&apos; operation
  //    should be enqueued onto.
  //  conv_input_descriptor: dimensions of the convolution input layer.
  //  conv_input_data: un-owned device memory region which contains the
  //    convolution input.
  //  conv_input_scale: a floating point scale to multiply with each element
  //    of conv_input_data.
  //  filter_descriptor: dimensions of the convolution filter.
  //  filter_data: un-owned device memory region which contains the
  //    convolution filter weights.
  //  convolution_descriptor: stride of the convolution filter.
  //  biases: un-owned device memory region containing biases to add to the
  //    input.
  //  activation_mode: Type of activation to perform.
  //  side_input_data: un-owned device memory region which contains optional
  //    side input data. If &apos;side_input_scale&apos; is non-zero, then this must
  //    point to data in the tensor shape specified by output_shape.
  //    It will be scaled by &apos;side_input_scale&apos; and added to the convolution
  //    result and bias prior to applying the activation function.
  //  side_input_scale: a floating point scale to multiply with each element
  //    of side_input_data.
  //  output_descriptor: dimensions of the output layer.
  //  output_data: un-owned device memory region in which to place the
  //    convolution result.
  //  scratch_allocator: un-owned, may-be-null object that may allocate scratch
  //    space in order to speed up the convolution operation.
  //  algorithm: specifies which algorithm should be used for the
  //    operation. If algorithm.is_default(), the system will pick an algorithm
  //    by default. The coding of the algorithm is be interpretted by the
  //    underlying implementation.
  //  output_profile_result: the output profile result for this call. The
  //    profiling is only enabled when this is not nullptr.
  //
  // conv_input_descriptor, filter_descriptor, convolution_descriptor and
  // output_descriptor together specify exactly how the convolution is aligned
  // with the input data:
  //
  // * (input dimensions - filter size + 1) / filter stride == output dimensions
  //   corresponds to dist_belief padding = VALID, i.e. the input is not padded.
  // * input dimensions / filter stride == output dimensions
  //   corresponds to dist_belief padding = SAME, i.e. input and output are the
  //   same size - this requires padding the input.
  // * (input dimensions + filter size - 1) / filter stride == output dimensions
  //   corresponds to dist_belief padding = FULL, i.e. the output is sized so
  //   that if the inverse of the filter is applied to the output in VALID mode
  //   the result is the same size as the input - this requires even more
  //   padding of the input.</doc>
