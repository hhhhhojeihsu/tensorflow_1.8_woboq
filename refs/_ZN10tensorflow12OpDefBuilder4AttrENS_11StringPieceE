<dec f='tensorflow/tensorflow/core/framework/op_def_builder.h' l='87' type='tensorflow::OpDefBuilder &amp; tensorflow::OpDefBuilder::Attr(tensorflow::StringPiece spec)'/>
<use f='tensorflow/tensorflow/core/framework/op.h' l='213' u='c' c='_ZN10tensorflow11register_op19OpDefBuilderWrapperILb1EE4AttrENS_11StringPieceE'/>
<doc f='tensorflow/tensorflow/core/framework/op_def_builder.h' l='56'>// Adds an attr to this OpDefBuilder (and returns *this). The spec has
  // format &quot;&lt;name&gt;:&lt;type&gt;&quot; or &quot;&lt;name&gt;:&lt;type&gt;=&lt;default&gt;&quot;
  // where &lt;name&gt; matches regexp [a-zA-Z][a-zA-Z0-9_]*
  // (by convention only using capital letters for attrs that can be inferred)
  // &lt;type&gt; can be:
  //   &quot;string&quot;, &quot;int&quot;, &quot;float&quot;, &quot;bool&quot;, &quot;type&quot;, &quot;shape&quot;, or &quot;tensor&quot;
  //   &quot;numbertype&quot;, &quot;realnumbertype&quot;, &quot;quantizedtype&quot;
  //       (meaning &quot;type&quot; with a restriction on valid values)
  //   &quot;{int32,int64}&quot; or {realnumbertype,quantizedtype,string}&quot;
  //       (meaning &quot;type&quot; with a restriction containing unions of value types)
  //   &quot;{\&quot;foo\&quot;, \&quot;bar\n baz\&quot;}&quot;, or &quot;{&apos;foo&apos;, &apos;bar\n baz&apos;}&quot;
  //       (meaning &quot;string&quot; with a restriction on valid values)
  //   &quot;list(string)&quot;, ..., &quot;list(tensor)&quot;, &quot;list(numbertype)&quot;, ...
  //       (meaning lists of the above types)
  //   &quot;int &gt;= 2&quot; (meaning &quot;int&quot; with a restriction on valid values)
  //   &quot;list(string) &gt;= 2&quot;, &quot;list(int) &gt;= 2&quot;
  //       (meaning &quot;list(string)&quot; / &quot;list(int)&quot; with length at least 2)
  // &lt;default&gt;, if included, should use the Proto text format
  // of &lt;type&gt;.  For lists use [a, b, c] format.
  //
  // Note that any attr specifying the length of an input or output will
  // get a default minimum of 1 unless the &gt;= # syntax is used.
  //
  // TODO(josh11b): Perhaps support restrictions and defaults as optional
  // extra arguments to Attr() instead of encoding them in the spec string.
  // TODO(josh11b): Would like to have better dtype handling for tensor attrs:
  // * Ability to say the type of an input/output matches the type of
  //   the tensor.
  // * Ability to restrict the type of the tensor like the existing
  //   restrictions for type attrs.
  // Perhaps by linking the type of the tensor to a type attr?</doc>
<use f='tensorflow/tensorflow/core/framework/function.cc' l='1225' u='c' c='_ZN10tensorflow17FunctionDefHelper6CreateERKSsNS_3gtl10ArraySliceISsEES5_S5_NS4_INS0_4NodeEEENS4_ISt4pairISsSsEEE'/>
<use f='tensorflow/tensorflow/core/framework/function.cc' l='1253' u='c' c='_ZN10tensorflow17FunctionDefHelper6DefineERKSsNS_3gtl10ArraySliceISsEES5_S5_NS4_INS0_4NodeEEE'/>
<def f='tensorflow/tensorflow/core/framework/op_def_builder.cc' l='533' ll='536' type='tensorflow::OpDefBuilder &amp; tensorflow::OpDefBuilder::Attr(tensorflow::StringPiece spec)'/>
