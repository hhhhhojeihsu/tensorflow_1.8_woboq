<dec f='tensorflow/tensorflow/core/framework/log_memory.h' l='95' type='static void tensorflow::LogMemory::RecordRawAllocation(const string &amp; operation, int64 step_id, size_t num_bytes, void * ptr, tensorflow::Allocator * allocator)'/>
<use f='tensorflow/tensorflow/c/c_api.cc' l='161' u='c' c='(anonymousnamespace)::allocate_tensor'/>
<doc f='tensorflow/tensorflow/core/framework/log_memory.h' l='86'>// Log a &quot;raw&quot; allocation, which is just a buffer sized in
  // bytes. The Eigen allocator, and memory copies, record their
  // allocations this way, since they do not allocate TensorFlow
  // tensors. The operation is set to the OpKernel name if this is
  // called from within an Op execution, otherwise it indicates an
  // operation such as memcpy. The step_id if &gt;=0 indicates which step
  // is executing, otherwise step_id is one of the SpecialStepIds
  // defined in op_kernel.h, e.g. Op Kernel construction or an
  // optimization pass such as constant folding.</doc>
<use f='tensorflow/tensorflow/core/common_runtime/gpu/gpu_util.cc' l='158' u='c' c='_ZN10tensorflow7GPUUtil15SetProtoFromGPUERKNS_6TensorEPNS_6DeviceEPKNS_13DeviceContextEPNS_11TensorProtoEbSt8functionIFvRKNS_6StatusEEE'/>
<def f='tensorflow/tensorflow/core/framework/log_memory.cc' l='77' ll='88' type='static void tensorflow::LogMemory::RecordRawAllocation(const string &amp; operation, const int64 step_id, size_t num_bytes, void * ptr, tensorflow::Allocator * allocator)'/>
