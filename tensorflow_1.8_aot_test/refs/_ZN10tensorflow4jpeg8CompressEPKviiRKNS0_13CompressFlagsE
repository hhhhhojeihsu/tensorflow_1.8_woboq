<dec f='tensorflow/tensorflow/core/lib/jpeg/jpeg_mem.h' l='152' type='string tensorflow::jpeg::Compress(const void * srcdata, int width, int height, const tensorflow::jpeg::CompressFlags &amp; flags)'/>
<doc f='tensorflow/tensorflow/core/lib/jpeg/jpeg_mem.h' l='147'>// Compress some raw image given in srcdata, the data is a 2D array of size
// stride*height with one of the formats enumerated above.
// The encoded data is returned as a string.
// If not empty, XMP metadata can be embedded in the image header
// On error, returns the empty string (which is never a valid jpeg).</doc>
<def f='tensorflow/tensorflow/core/lib/jpeg/jpeg_mem.cc' l='754' ll='761' type='string tensorflow::jpeg::Compress(const void * srcdata, int width, int height, const tensorflow::jpeg::CompressFlags &amp; flags)'/>
