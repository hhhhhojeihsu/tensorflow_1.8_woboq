<dec f='tensorflow/tensorflow/compiler/tf2xla/lib/batch_dot.h' l='46' type='xla::StatusOr&lt;xla::ComputationDataHandle&gt; tensorflow::BatchDot(xla::ComputationBuilder * builder, xla::ComputationDataHandle x, xla::ComputationDataHandle y, bool transpose_x, bool transpose_y, bool conjugate_x = false, bool conjugate_y = false)'/>
<use f='tensorflow/tensorflow/compiler/tf2xla/kernels/batch_matmul_op.cc' l='31' u='c' c='_ZN10tensorflow12_GLOBAL__N_113BatchMatMulOp7CompileEPNS_18XlaOpKernelContextE'/>
<doc f='tensorflow/tensorflow/compiler/tf2xla/lib/batch_dot.h' l='24'>// Multiplies slices of two tensors in batches.

// Multiplies all slices of `Tensor` `x` and `y` (each slice can be
// viewed as an element of a batch), and arranges the individual results
// in a single output tensor of the same batch size. Each of the
// individual slices can optionally be transposed before multiplication by
// setting the `transpose_x` or `transpose_y` flag to `true`. Similarly, each
// can be elementwise-complex-conjugated by setting the `conjugate_x` or
// `conjugate_y` flag to `true`. To apply a Hermitian adjoint to `x`, set both
// `transpose_x` and `conjugate_x` to `true`, and analogously for `y`.
//
// The input tensors `x` and `y` are 2-D or higher with shape `[..., r_x, c_x]`
// and `[..., r_y, c_y]`.
//
// The output tensor is 2-D or higher with shape `[..., r_o, c_o]`, where:
//
//     r_o = c_x if transpose_x else r_x
//     c_o = r_y if transpose_y else c_y
//
// It is computed as:
//
//     output[..., :, :] = matrix(x[..., :, :]) * matrix(y[..., :, :])</doc>
<def f='tensorflow/tensorflow/compiler/tf2xla/lib/batch_dot.cc' l='28' ll='115' type='xla::StatusOr&lt;xla::ComputationDataHandle&gt; tensorflow::BatchDot(xla::ComputationBuilder * builder, xla::ComputationDataHandle x, xla::ComputationDataHandle y, bool transpose_x, bool transpose_y, bool conjugate_x = false, bool conjugate_y = false)'/>
<use f='tensorflow/tensorflow/compiler/tf2xla/lib/cholesky.cc' l='73' u='c' c='_ZN10tensorflow12_GLOBAL__N_117CholeskyUnblockedEPN3xla18ComputationBuilderERKNS1_21ComputationDataHandleE'/>
<use f='tensorflow/tensorflow/compiler/tf2xla/lib/cholesky.cc' l='78' u='c' c='_ZN10tensorflow12_GLOBAL__N_117CholeskyUnblockedEPN3xla18ComputationBuilderERKNS1_21ComputationDataHandleE'/>
<use f='tensorflow/tensorflow/compiler/tf2xla/lib/cholesky.cc' l='139' u='c' c='_ZN10tensorflow8CholeskyEPN3xla18ComputationBuilderENS0_21ComputationDataHandleEx'/>
<use f='tensorflow/tensorflow/compiler/tf2xla/lib/triangular_solve.cc' l='201' u='c' c='_ZN10tensorflow15TriangularSolveEPN3xla18ComputationBuilderERKNS0_21ComputationDataHandleES3_bbbbx'/>
<use f='tensorflow/tensorflow/compiler/tf2xla/lib/triangular_solve.cc' l='250' u='c' c='_ZN10tensorflow15TriangularSolveEPN3xla18ComputationBuilderERKNS0_21ComputationDataHandleES3_bbbbx'/>
<use f='tensorflow/tensorflow/compiler/tf2xla/lib/triangular_solve.cc' l='300' u='c' c='_ZN10tensorflow15TriangularSolveEPN3xla18ComputationBuilderERKNS0_21ComputationDataHandleES3_bbbbx'/>
<use f='tensorflow/tensorflow/compiler/tf2xla/lib/triangular_solve.cc' l='349' u='c' c='_ZN10tensorflow15TriangularSolveEPN3xla18ComputationBuilderERKNS0_21ComputationDataHandleES3_bbbbx'/>
<use f='tensorflow/tensorflow/compiler/tf2xla/lib/triangular_solve.cc' l='523' u='c' c='_ZN10tensorflow26TriangularSolveLeftLookingEPN3xla18ComputationBuilderERKNS0_21ComputationDataHandleES5_bb'/>
