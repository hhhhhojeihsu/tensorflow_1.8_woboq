<def f='tensorflow/tensorflow/compiler/xla/service/cpu/ir_function.h' l='52' ll='114'/>
<size>112</size>
<doc f='tensorflow/tensorflow/compiler/xla/service/cpu/ir_function.h' l='32'>// IrFunction creates and encapsulates an llvm::Function, exposing methods to
// emitters for function and function argument access.
// The llvm::Function is created with the standard function signature
// used in the XLA CPU backend (see ir_function.cc for argument details).
// In addtion IrFunction saves the callers IR insert point during contruction,
// and restores it after desctruction.
//
// Example usage:
//
//    // Create and initialize new IrFunction.
//    std::unique_ptr&lt;IrFunction&gt; compute_function(new IrFunction(...));
//    // Emit IR for function body using IrFunction helper methods.
//    ...
//    // Store reference to llvm::Function for future invocation.
//    ir_functions.push_back(compute_function.function());
//    // Delete IrFunction (finalizes IR function and restores caller insertion
//    // point).
//    compute_function.reset();
//</doc>
<fun r='_ZN3xla3cpu10IrFunctionC1ERKSsN4llvm11GlobalValue12LinkageTypesEbbPNS4_6ModuleEPNS4_9IRBuilderINS4_14ConstantFolderENS4_24IRBuilderDefaultInserterEEEx'/>
<fun r='_ZN3xla3cpu10IrFunctionD1Ev'/>
<fun r='_ZN3xla3cpu10IrFunction20GetDynamicLoopBoundsEv'/>
<fun r='_ZN3xla3cpu10IrFunction8functionEv'/>
<fun r='_ZN3xla3cpu10IrFunction10result_argEv'/>
<fun r='_ZN3xla3cpu10IrFunction20exec_run_options_argEv'/>
<fun r='_ZN3xla3cpu10IrFunction14parameters_argEv'/>
<fun r='_ZN3xla3cpu10IrFunction16temp_buffers_argEv'/>
<fun r='_ZN3xla3cpu10IrFunction20profile_counters_argEv'/>
<fun r='_ZN3xla3cpu10IrFunction10InitializeERKSsN4llvm11GlobalValue12LinkageTypesEbb'/>
<fun r='_ZN3xla3cpu10IrFunction19GetDynamicLoopBoundEx'/>
<mbr r='xla::cpu::IrFunction::ir_builder_' o='0' t='llvm::IRBuilder&lt;&gt; *'/>
<mbr r='xla::cpu::IrFunction::llvm_module_' o='64' t='llvm::Module *'/>
<mbr r='xla::cpu::IrFunction::caller_insert_point_guard_' o='128' t='llvm::IRBuilder&lt;&gt;::InsertPointGuard'/>
<mbr r='xla::cpu::IrFunction::num_dynamic_loop_bounds_' o='384' t='int64'/>
<mbr r='xla::cpu::IrFunction::function_' o='448' t='llvm::Function *'/>
<mbr r='xla::cpu::IrFunction::result_arg_' o='512' t='llvm::Argument *'/>
<mbr r='xla::cpu::IrFunction::exec_run_options_arg_' o='576' t='llvm::Value *'/>
<mbr r='xla::cpu::IrFunction::parameters_arg_' o='640' t='llvm::Value *'/>
<mbr r='xla::cpu::IrFunction::temp_buffers_arg_' o='704' t='llvm::Value *'/>
<mbr r='xla::cpu::IrFunction::dynamic_loop_bounds_arg_' o='768' t='llvm::Value *'/>
<mbr r='xla::cpu::IrFunction::profile_counters_arg_' o='832' t='llvm::Value *'/>
