<def f='tensorflow/tensorflow/core/lib/random/random_distributions.h' l='432' ll='472'/>
<def f='tensorflow/tensorflow/core/lib/random/random_distributions.h' l='474' ll='514'/>
<def f='tensorflow/tensorflow/core/lib/random/random_distributions.h' l='517' ll='557'/>
<def f='tensorflow/tensorflow/core/lib/random/random_distributions.h' l='560' ll='599'/>
<doc f='tensorflow/tensorflow/core/lib/random/random_distributions.h' l='429'>// Exactly like the float version, except that we convert to half afterwards;
// since we don&apos;t have half-precision sin/cos even on GPUs, there&apos;s nothing to
// gain from working in half internally.</doc>
<doc f='tensorflow/tensorflow/core/lib/random/random_distributions.h' l='516'>// Partial specialization for float.</doc>
<doc f='tensorflow/tensorflow/core/lib/random/random_distributions.h' l='559'>// Partial specialization for double.</doc>
<smbr r='tensorflow::random::TruncatedNormalDistribution{type-parameter-0-0,Eigen::half}::kResultElementCount' t='const int'/>
<smbr r='tensorflow::random::TruncatedNormalDistribution{type-parameter-0-0,Eigen::half}::kElementCost' t='const int'/>
<smbr r='tensorflow::random::TruncatedNormalDistribution{type-parameter-0-0,Eigen::half}::kVariableSamplesPerOutput' t='const bool'/>
<mbr r='tensorflow::random::TruncatedNormalDistribution::kTruncateValue' t='const float'/>
<fun r='_ZN10tensorflow6random27TruncatedNormalDistributionIT_N5Eigen4halfEEclEPS2_'/>
<smbr r='tensorflow::random::TruncatedNormalDistribution{type-parameter-0-0,tensorflow::bfloat16}::kResultElementCount' t='const int'/>
<smbr r='tensorflow::random::TruncatedNormalDistribution{type-parameter-0-0,tensorflow::bfloat16}::kElementCost' t='const int'/>
<smbr r='tensorflow::random::TruncatedNormalDistribution{type-parameter-0-0,tensorflow::bfloat16}::kVariableSamplesPerOutput' t='const bool'/>
<mbr r='tensorflow::random::TruncatedNormalDistribution::kTruncateValue' t='const float'/>
<fun r='_ZN10tensorflow6random27TruncatedNormalDistributionIT_NS_8bfloat16EEclEPS2_'/>
<smbr r='tensorflow::random::TruncatedNormalDistribution{type-parameter-0-0,float}::kResultElementCount' t='const int'/>
<smbr r='tensorflow::random::TruncatedNormalDistribution{type-parameter-0-0,float}::kElementCost' t='const int'/>
<smbr r='tensorflow::random::TruncatedNormalDistribution{type-parameter-0-0,float}::kVariableSamplesPerOutput' t='const bool'/>
<mbr r='tensorflow::random::TruncatedNormalDistribution::kTruncateValue' t='const float'/>
<fun r='_ZN10tensorflow6random27TruncatedNormalDistributionIT_fEclEPS2_'/>
<smbr r='tensorflow::random::TruncatedNormalDistribution{type-parameter-0-0,double}::kResultElementCount' t='const int'/>
<smbr r='tensorflow::random::TruncatedNormalDistribution{type-parameter-0-0,double}::kElementCost' t='const int'/>
<smbr r='tensorflow::random::TruncatedNormalDistribution{type-parameter-0-0,double}::kVariableSamplesPerOutput' t='const bool'/>
<mbr r='tensorflow::random::TruncatedNormalDistribution::kTruncateValue' t='const double'/>
<fun r='_ZN10tensorflow6random27TruncatedNormalDistributionIT_dEclEPS2_'/>
