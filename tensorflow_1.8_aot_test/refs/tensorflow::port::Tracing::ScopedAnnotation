<def f='tensorflow/tensorflow/core/platform/tracing.h' l='204' ll='222'/>
<size>8</size>
<doc f='tensorflow/tensorflow/core/platform/tracing.h' l='189'>// This class permits a user to apply annotation on kernels and memcpys
// when launching them. While an annotation is in scope, all activities
// within that scope get their names replaced by the annotation. The kernel
// name replacement is done when constructing the protobuf for sending out to
// a client (e.g., the stubby requestor) for both API and Activity records.
//
// Ownership: The creator of ScopedAnnotation assumes ownership of the object.
//
// Usage: {
//          ScopedAnnotation annotation(&quot;first set of kernels&quot;);
//          Kernel1&lt;&lt;&lt;x,y&gt;&gt;&gt;;
//          LaunchKernel2(); // Which eventually launches a cuda kernel.
//        }
// In the above scenario, the GPUProf UI would show 2 kernels with the name
// &quot;first set of kernels&quot; executing -- they will appear as the same kernel.</doc>
<fun r='_ZN10tensorflow4port7Tracing16ScopedAnnotationC1ENS_11StringPieceE'/>
<fun r='_ZN10tensorflow4port7Tracing16ScopedAnnotationC1ENS_11StringPieceES3_'/>
<fun r='_ZN10tensorflow4port7Tracing16ScopedAnnotation7EnabledEv'/>
<mbr r='tensorflow::port::Tracing::ScopedAnnotation::annotation_' o='0' t='std::unique_ptr&lt;Engine::Annotation&gt;'/>
<fun r='_ZN10tensorflow4port7Tracing16ScopedAnnotationC1ENS_11StringPieceE'/>
<fun r='_ZN10tensorflow4port7Tracing16ScopedAnnotationC1ENS_11StringPieceES3_'/>
