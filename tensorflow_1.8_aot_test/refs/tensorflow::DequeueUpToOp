<inh f='tensorflow/tensorflow/core/kernels/queue_ops.cc' l='54' c='tensorflow::QueueAccessOpKernel'/>
<def f='tensorflow/tensorflow/core/kernels/queue_ops.cc' l='318' ll='368'/>
<size>296</size>
<doc f='tensorflow/tensorflow/core/kernels/queue_ops.cc' l='289'>// Defines a DequeueUpToOp, the execution of which concatenates the
// requested number of elements from the given Queue along the 0th
// dimension, and emits the result as a single tuple of tensors.
//
// The difference between this op and DequeueMany is the handling when
// the Queue is closed.  While the DequeueMany op will return if there
// an error when there are less than num_elements elements left in the
// closed queue, this op will return between 1 and
// min(num_elements, elements_remaining_in_queue), and will not block.
// If there are no elements left, then the standard DequeueMany error
// is returned.
//
// This op only works if the underlying Queue implementation accepts
// the allow_small_batch = true parameter to TryDequeueMany.
// If it does not, an errors::Unimplemented exception is returned.
//
// The op has two inputs:
// - Input 0: the handle to a queue.
// - Input 1: the number of elements to dequeue.
//
// The op has k outputs, where k is the number of components in the
// tuples stored in the given Queue, and output i is the ith component
// of the dequeued tuple.
//
// The op has one attribute: allow_small_batch.  If the Queue supports
// it, setting this to true causes the queue to return smaller
// (possibly zero length) batches when it is closed, up to however
// many elements are available when the op executes.  In this case,
// the Queue does not block when closed.</doc>
<fun r='_ZN10tensorflow13DequeueUpToOp12ComputeAsyncEPNS_15OpKernelContextEPNS_14QueueInterfaceESt8functionIFvvEE'/>
<fun r='_ZN10tensorflow13DequeueUpToOpD1Ev'/>
