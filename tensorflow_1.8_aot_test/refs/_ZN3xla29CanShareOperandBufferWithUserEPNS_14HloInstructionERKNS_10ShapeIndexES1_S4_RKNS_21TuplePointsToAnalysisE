<dec f='tensorflow/tensorflow/compiler/xla/service/liveness_util.h' l='52' type='bool xla::CanShareOperandBufferWithUser(xla::HloInstruction * operand, const xla::ShapeIndex &amp; operand_index, xla::HloInstruction * user, const xla::ShapeIndex &amp; user_index, const xla::TuplePointsToAnalysis &amp; points_to_analysis)'/>
<use f='tensorflow/tensorflow/compiler/xla/service/buffer_liveness.cc' l='135' u='c' c='_ZNK3xla14BufferLiveness26live_range_strictly_beforeERKNS_13LogicalBufferES3_'/>
<doc f='tensorflow/tensorflow/compiler/xla/service/liveness_util.h' l='45'>// Returns true if &apos;user&apos; (at &apos;user_index&apos;) can share a buffer with its operand
// &apos;operand&apos; (at &apos;operand_index&apos;). Returns false otherwise.
//
// REQUIRES: &apos;operand&apos; is an operand of &apos;user&apos;.
//
// TODO(b/65835246): Remove TuplePointsToAnalysis overload when all users have
// moved over to the dataflow overload.</doc>
<use f='tensorflow/tensorflow/compiler/xla/service/heap_simulator.cc' l='205' u='c' c='_ZN3xla13HeapSimulator14RunComputationERKNS_14HloComputationERKSt6vectorIPKNS_14HloInstructionESaIS7_EERKNS_21TuplePointsToAnalysisE'/>
<def f='tensorflow/tensorflow/compiler/xla/service/liveness_util.cc' l='183' ll='273' type='bool xla::CanShareOperandBufferWithUser(xla::HloInstruction * operand, const xla::ShapeIndex &amp; operand_index, xla::HloInstruction * user, const xla::ShapeIndex &amp; user_index, const xla::TuplePointsToAnalysis &amp; points_to_analysis)'/>
<doc f='tensorflow/tensorflow/compiler/xla/service/liveness_util.cc' l='169'>// User and operand can share buffers iff both instructions emit the same shape
// and layout, and &apos;user&apos; meets one of the following qualifications:
//
// (1) Is element-wise. Or...
// (2) Is a loop fusion instruction where the only use of &apos;operand&apos; at &apos;index&apos;
//     in the set &apos;user.fused_instructions&apos; is a DynamicUpdateSlice fused root
//     at operand 0. Or...
// (3) Is a kDot -&gt; kAdd (or fused kTransposeDot -&gt; kAdd) output fusion
//     instruction where the only use of &apos;operand&apos; at &apos;index&apos; in the set
//     &apos;user.fused_instructions&apos; is a kAdd fused root at operand 0 or 1. Or...
// (4) The &apos;user&apos; of &apos;operand&apos; is DynamicUpdateSlice or While at operand index
//     0.
//
// (2) and (3) can only be determined if points-to analysis is available.</doc>
