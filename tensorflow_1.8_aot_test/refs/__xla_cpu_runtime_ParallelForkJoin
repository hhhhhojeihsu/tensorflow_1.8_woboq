<dec f='tensorflow/tensorflow/compiler/xla/service/cpu/runtime_fork_join.h' l='25' type='void __xla_cpu_runtime_ParallelForkJoin(void * result_ptr, const void * run_options_ptr, const void ** params, void ** temps, tensorflow::uint64 * prof_counters, tensorflow::int32 num_partitions, tensorflow::int64 * partitions, tensorflow::int32 num_partitioned_dims, void * function_ptr)'/>
<def f='tensorflow/tensorflow/compiler/xla/service/cpu/runtime_fork_join.cc' l='61' ll='97' type='void __xla_cpu_runtime_ParallelForkJoin(void * result_ptr, const void * run_options_ptr, const void ** params, void ** temps, uint64 * prof_counters, int32 num_partitions, int64 * partitions, int32 num_partitioned_dims, void * function_ptr)'/>
<doc f='tensorflow/tensorflow/compiler/xla/service/cpu/runtime_fork_join.cc' l='33'>// Dispatches &apos;num_partitions - 1&apos; calls to &apos;function_ptr&apos; in parallel.
// Calls &apos;function_ptr&apos; for first partition inline.
// Uses blocking counter to synchonize threads after parallel calls complete.
//
// The &apos;partitions&apos; array has a total number of elements equal to
// &apos;num_partitions * num_partitioned_dims * 2&apos; (the &apos;2&apos; is necessary to specify
// dimension start and limit indices).
//
// The &apos;partitions&apos; array layout stores array elements in memory with dimension
// start limit as the most-minor dimension, followed by dimension, then
// partition.
//
// EX: Layout of &apos;partitions&apos; array with &apos;num_partitions = 2&apos;, and
//     &apos;num_partitioned_dims = 3&apos;
//
//   [partition0_dim0_start]
//   [partition0_dim0_limit]
//   [partition0_dim1_start]
//   [partition0_dim1_limit]
//   [partition0_dim2_start]
//   [partition0_dim2_limit]
//   [partition1_dim0_start]
//   [partition1_dim0_limit]
//   [partition1_dim1_start]
//   [partition1_dim1_limit]
//   [partition1_dim2_start]
//   [partition1_dim2_limit]
//</doc>
<doc f='tensorflow/tensorflow/compiler/xla/service/cpu/runtime_fork_join.h' l='23'>// Dispatches &apos;num_partitions&apos; parallel calls to &apos;function_ptr&apos; and joins
// threads before returning. See comments in runtime_fork_join.cc for details.</doc>
<use f='tensorflow/tensorflow/compiler/xla/service/cpu/simple_orc_jit.cc' l='196' macro='1' u='r'/>
