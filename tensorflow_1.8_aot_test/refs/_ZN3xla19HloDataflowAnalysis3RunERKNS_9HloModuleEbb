<dec f='tensorflow/tensorflow/compiler/xla/service/hlo_dataflow_analysis.h' l='62' type='static StatusOr&lt;std::unique_ptr&lt;HloDataflowAnalysis&gt; &gt; xla::HloDataflowAnalysis::Run(const xla::HloModule &amp; module, bool ssa_form = false, bool bitcast_defines_value = false)'/>
<doc f='tensorflow/tensorflow/compiler/xla/service/hlo_dataflow_analysis.h' l='45'>// Run dataflow analysis on the given module. Parameters:
  //
  //   ssa_form : If true then new values are defined at the merge points of
  //     kWhile instructions. Abusing nomenclature somewhat, we call these &quot;phi
  //     values&quot;.  The merge is formed by the init value and loop backedge. The
  //     SSA form is minimal in that a new phi value is defined only if the
  //     merge point is reachable by multiple different values. The SSA form is
  //     also in loop-closed form in that no values defined inside of a loop
  //     (while body) is used outside of the loop.
  //
  //     If ssa_form is false, then merge points do not define new
  //     values. Rather, the HloValueSet for the merge point contains the union
  //     of the merged HloValues.
  //
  //   bitcast_defines_value : If true then the Bitcast HLO instruction defines
  //     a new HLO value in the analysis. If false then Bitcast forwards the
  //     value of its operand.</doc>
<use f='tensorflow/tensorflow/compiler/xla/service/copy_insertion.cc' l='1223' u='c' c='_ZN3xla13CopyInsertion28AddCopiesForBufferAssignmentEPNS_9HloModuleE'/>
<use f='tensorflow/tensorflow/compiler/xla/service/hlo_alias_analysis.cc' l='462' u='c' c='_ZN3xla16HloAliasAnalysis3RunEPNS_9HloModuleE'/>
<def f='tensorflow/tensorflow/compiler/xla/service/hlo_dataflow_analysis.cc' l='789' ll='843' type='static StatusOr&lt;std::unique_ptr&lt;HloDataflowAnalysis&gt; &gt; xla::HloDataflowAnalysis::Run(const xla::HloModule &amp; module, bool ssa_form = false, bool bitcast_defines_value = false)'/>
<doc f='tensorflow/tensorflow/compiler/xla/service/hlo_dataflow_analysis.cc' l='788'>/* static */</doc>
