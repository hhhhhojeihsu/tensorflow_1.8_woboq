<dec f='tensorflow/tensorflow/core/kernels/linalg_ops_common.h' l='150' type='void tensorflow::LinearAlgebraOp::ComputeTensorSlice(tensorflow::OpKernelContext * context, int64 matrix_index, const TensorInputs &amp; inputs, const TensorShapes &amp; input_matrix_shapes, const TensorOutputs &amp; outputs, const TensorShapes &amp; output_matrix_shapes)'/>
<doc f='tensorflow/tensorflow/core/kernels/linalg_ops_common.h' l='133'>// This function maps 2-d slices (matrices) of the input and output tensors
  // using Eigen::Map and calls ComputeMatrix implemented in terms of the
  // Eigen::MatrixBase API by the derived class.
  //
  // The &apos;matrix_index&apos; parameter specifies the index of the matrix to be used
  // from each input tensor, and the index of the matrix to be written to each
  // output tensor. The input matrices are in row major order, and located at
  // the memory addresses
  //   inputs[i].flat&lt;Scalar&gt;().data() +
  //   matrix_index * input_matrix_shapes[i].num_elements()
  // for i in 0...inputs.size()-1.
  // The output matrices are in row major order, and located at the memory
  // address
  //   outputs[i]-&gt;flat&lt;Scalar&gt;().data() +
  //   matrix_index * output_matrix_shapes[i].num_elements().
  // for i in 0...outputs.size()-1.
  //</doc>
<use f='tensorflow/tensorflow/core/kernels/linalg_ops_common.cc' l='104' u='c' c='_ZN10tensorflow15LinearAlgebraOp7ComputeEPNS_15OpKernelContextE'/>
<def f='tensorflow/tensorflow/core/kernels/linalg_ops_common.cc' l='217' ll='247' type='void tensorflow::LinearAlgebraOp::ComputeTensorSlice(tensorflow::OpKernelContext * context, int64 matrix_index, const TensorInputs &amp; inputs, const TensorShapes &amp; input_matrix_shapes, const TensorOutputs &amp; outputs, const TensorShapes &amp; output_matrix_shapes)'/>
