<dec f='tensorflow/tensorflow/stream_executor/blas.h' l='1034' type='bool perftools::gputools::blas::BlasSupport::DoBlasGemmWithAlgorithm(perftools::gputools::Stream * stream, blas::Transpose transa, blas::Transpose transb, uint64 m, uint64 n, uint64 k, int alpha, const DeviceMemory&lt;int8&gt; &amp; a, int lda, const DeviceMemory&lt;int8&gt; &amp; b, int ldb, int beta, DeviceMemory&lt;int32&gt; * c, int ldc, perftools::gputools::blas::ComputationType computation_type, AlgorithmType algorithm, perftools::gputools::blas::ProfileResult * output_profile_result)'/>
<doc f='tensorflow/tensorflow/stream_executor/blas.h' l='1020'>// Like DoBlasGemm, but accepts an algorithm and an compute type.
  //
  // The compute type lets you say (e.g.) that the inputs and outputs are
  // Eigen::halfs, but you want the internal computations to be done with
  // float32 precision.
  //
  // Note the subtle difference in the version that accepts Eigen:::half --
  // alpha and beta have type const Eigen::half&amp;, not float.
  //
  // If output_profile_result is not null, a failure here does not put the
  // stream in a failure state.  Instead, success/failure is indicated by
  // output_profile_result-&gt;is_valid().  This lets you use this function for
  // choosing the best algorithm among many (some of which may fail) without
  // creating a new Stream for each attempt.</doc>
<use f='tensorflow/tensorflow/stream_executor/stream.cc' l='3924' u='a' c='_ZN9perftools8gputools6Stream25ThenBlasGemmWithAlgorithmENS0_4blas9TransposeES3_yyyiRKNS0_12DeviceMemoryIaEEiS7_iiPNS4_IiEEiNS2_15ComputationTypeExPNS2_13ProfileResultE'/>
