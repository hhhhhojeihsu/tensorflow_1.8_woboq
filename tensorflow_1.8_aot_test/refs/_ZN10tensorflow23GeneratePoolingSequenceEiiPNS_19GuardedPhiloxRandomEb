<dec f='tensorflow/tensorflow/core/kernels/fractional_pool_common.h' l='73' type='std::vector&lt;int64&gt; tensorflow::GeneratePoolingSequence(int input_length, int output_length, tensorflow::GuardedPhiloxRandom * generator, bool pseudo_random)'/>
<doc f='tensorflow/tensorflow/core/kernels/fractional_pool_common.h' l='38'>// Generate pooling sequence for fractional pooling along one dimension.
//
// Regular max/avg pooling can be viewed as a special case, in which given the
//     * input_length: e.g. 10
//     * output_length: e.g. 5
// it will generate pooling sequence as
//     diff sequence: [2, 2, 2, 2, 2]
// or as
//     cumulative sequence: [0, 2, 4, 6, 8, 10]
//
// In the case of fractional pooling, input_length is not an integer multiple of
// output_length, randomness plays a role when generating pooling sequence.
// There are two type of randomness (random vs pseudo-random) defined in paper:
// http://arxiv.org/abs/1412.6071
// You can check the paper for the difference between these two types.
//
// In summary, the generated diff sequence satisfy the following properties for
// both types of randomness:
//     * length(generated_diff_pooling_sequence) = output_length
//     * sum(generated_diff_pooling_sequence) = input_length
//     * Let&apos;s define floor(input_length / output_length) = K, then
//       K &lt;= generated_diff_pooling_sequence[i] &lt;= K+1
// For example, when input_length = 10, output_length = 6, the following are
// valid pooling sequence:
//     * [1, 2, 2, 1, 2, 2]
//     * [1, 1, 2, 2, 2, 2]
// [1, 3, 2, 2, 2, 2] is not valid.
//
// Args:
//   input_length:  See above explanation
//   output_length:  See above explanation
//   generator:  Parallel version of random number generator
//   pseudo_random:  Whether or not use pseudo-random
// Returns:
//   pooling_sequence:  This is the cumulative pooling sequence.</doc>
<def f='tensorflow/tensorflow/core/kernels/fractional_pool_common.cc' l='100' ll='132' type='std::vector&lt;int64&gt; tensorflow::GeneratePoolingSequence(int input_length, int output_length, tensorflow::GuardedPhiloxRandom * generator, bool pseudo_random)'/>
