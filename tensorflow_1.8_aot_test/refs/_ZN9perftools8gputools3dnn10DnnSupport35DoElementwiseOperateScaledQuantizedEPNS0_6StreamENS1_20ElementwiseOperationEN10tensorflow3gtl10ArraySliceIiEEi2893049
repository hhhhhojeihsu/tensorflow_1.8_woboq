<def f='tensorflow/tensorflow/stream_executor/dnn.h' l='1843' ll='1851' type='bool perftools::gputools::dnn::DnnSupport::DoElementwiseOperateScaledQuantized(perftools::gputools::Stream * stream, perftools::gputools::dnn::ElementwiseOperation operation, port::ArraySlice&lt;int&gt; input_multiplicands, int output_divisor, port::ArraySlice&lt;dnn::BatchDescriptor&gt; input_dimensions, port::ArraySlice&lt;const DeviceMemory&lt;float&gt; *&gt; input_data, const dnn::BatchDescriptor &amp; output_dimensions, DeviceMemory&lt;float&gt; * output_data)'/>
<doc f='tensorflow/tensorflow/stream_executor/dnn.h' l='1822'>// Computes the specified operation (e.g. addition or multiplication)
  // between corresponding elements in the inputs and stores the result in the
  // output element. Each input is multiplied by a scalar constant and the
  // result is divided by a scalar constant.
  // e.g. To perform Z = 0.9*X + 1.1*Y, set the input multiplicands to 9 and 11
  // and the output divisor to 10.
  // The inputs and output must all have the same dimensions, but may have
  // different quantization parameters (min_value and max_value).
  //
  // Arguments (all borrowed):
  //  stream: borrowed pointer to the stream that the &apos;elementwise operation&apos;
  // should be enqueued onto.
  //  operation: The operation to perform.
  //  input_multiplicands: Amount to scale each input.
  //  output_divisor: Amount to divide the output.
  //  input_dimensions: The dimensions of each input.
  //  input_data: un-owned device memory region which contains the
  //    input data for each input layer.
  //  output_dimensions: The dimensions of the output.
  //  output_data: un-owned device memory region in which to place the
  //    operation result.</doc>
<use f='tensorflow/tensorflow/stream_executor/stream.cc' l='1761' u='c' c='_ZN9perftools8gputools6Stream37ThenElementwiseOperateScaledQuantizedENS0_3dnn20ElementwiseOperationEN10tensorflow3gtl10ArraySliceIiEEiNS6_INS2_15Batch13347366'/>
