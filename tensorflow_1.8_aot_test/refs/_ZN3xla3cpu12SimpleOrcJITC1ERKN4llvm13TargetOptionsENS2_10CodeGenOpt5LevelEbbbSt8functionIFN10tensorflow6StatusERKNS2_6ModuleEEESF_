<dec f='tensorflow/tensorflow/compiler/xla/service/cpu/simple_orc_jit.h' l='67' type='void xla::cpu::SimpleOrcJIT::SimpleOrcJIT(const llvm::TargetOptions &amp; target_options, llvm::CodeGenOpt::Level opt_level, bool optimize_for_size, bool enable_fast_math, bool disable_expensive_passes, LLVMCompiler::ModuleHook pre_optimization_hook, LLVMCompiler::ModuleHook post_optimization_hook)'/>
<doc f='tensorflow/tensorflow/compiler/xla/service/cpu/simple_orc_jit.h' l='53'>// Create a new JIT, targeting the host architecture.
  // The |target_options| parameter allows customization of certain code
  // generation properties of the TargetMachine (whether or not float point math
  // can be reassociated, etc.).
  // The |opt_level| parameter controls the optimization level of the code
  // generator.
  // The |optimize_for_size| parameter specifies that the code generator should
  // optimize to reduce code size, potentially at the cost of performance.
  // The |disable_expensive_passes| parameter will disable certain optimization
  // passes
  // The |pre_optimization_hook| is invoked on the module before any IR
  // level optimizations are applied.
  // The |post_optimization_hook| is invoked on the module after all IR
  // level optimizations are applied.</doc>
<def f='tensorflow/tensorflow/compiler/xla/service/cpu/simple_orc_jit.cc' l='75' ll='115' type='void xla::cpu::SimpleOrcJIT::SimpleOrcJIT(const llvm::TargetOptions &amp; target_options, llvm::CodeGenOpt::Level opt_level, bool optimize_for_size, bool enable_fast_math, bool disable_expensive_passes, LLVMCompiler::ModuleHook pre_optimization_hook, LLVMCompiler::ModuleHook post_optimization_hook)'/>
