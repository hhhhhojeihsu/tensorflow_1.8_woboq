<dec f='tensorflow/tensorflow/compiler/xla/literal_util.h' l='831' type='static const xla::LiteralView xla::LiteralView::Create(const xla::Literal &amp; literal, const xla::ShapeIndex &amp; view_root = {})'/>
<doc f='tensorflow/tensorflow/compiler/xla/literal_util.h' l='825'>// Create and return a view of the given literal rooted at the given shape
  // index within the given literal. A factory is used rather than a public
  // constructor because only const LiteralViews are supported. It&apos;s still
  // possible to create non-const LiteralViews via the copy constructors, but
  // the factory method makes it a bit less likely. Implementing literal slices
  // will fix this undesirable situation (b/71550060).</doc>
<use f='tensorflow/tensorflow/compiler/xla/literal_util.cc' l='1577' u='c' c='_ZNK3xla7Literal14ConvertToShapeERKNS_5ShapeEb'/>
<def f='tensorflow/tensorflow/compiler/xla/literal_util.cc' l='2133' ll='2136' type='static const xla::LiteralView xla::LiteralView::Create(const xla::Literal &amp; literal, const xla::ShapeIndex &amp; view_root = {})'/>
<doc f='tensorflow/tensorflow/compiler/xla/literal_util.cc' l='2133'>/* static */</doc>
<use f='tensorflow/tensorflow/compiler/xla/service/algebraic_simplifier.cc' l='508' u='c' c='_ZN3xlaL18BuildTupleConstantEPNS_14HloComputationERKNS_7LiteralE'/>
<use f='tensorflow/tensorflow/compiler/xla/service/generic_transfer_manager.cc' l='120' u='c' c='_ZN3xla22GenericTransferManager23TransferLiteralToDeviceEPN9perftools8gputools14StreamExecutorERKNS_7LiteralERKNS_12ShapedBufferE'/>
