<dec f='tensorflow/tensorflow/compiler/xla/service/llvm_ir/kernel_support_library.h' l='141' type='static void xla::KernelSupportLibrary::EmitAndCallOutlinedKernel(bool enable_fast_math, bool optimize_for_size, llvm::IRBuilder&lt;&gt; * ir_builder, tensorflow::StringPiece kernel_name, ArgumentVector arguments, const std::function&lt;void (ArgumentVector)&gt; &amp; kernel_body_generator)'/>
<use f='tensorflow/tensorflow/compiler/xla/service/llvm_ir/kernel_support_library.h' l='154' u='c' c='_ZN3xla20KernelSupportLibrary25EmitAndCallOutlinedKernelEbbPN4llvm9IRBuilderINS1_14ConstantFolderENS1_24IRBuilderDefaultInserterEEEN10tensorflow11Stri15782744'/>
<use f='tensorflow/tensorflow/compiler/xla/service/llvm_ir/kernel_support_library.h' l='168' u='c' c='_ZN3xla20KernelSupportLibrary25EmitAndCallOutlinedKernelEbbPN4llvm9IRBuilderINS1_14ConstantFolderENS1_24IRBuilderDefaultInserterEEEN10tensorflow11Stri804784'/>
<doc f='tensorflow/tensorflow/compiler/xla/service/llvm_ir/kernel_support_library.h' l='123'>// Generates the following control flow structure:
  //
  //  define @`kernel_name`(arg0, arg1, ... arg`arguments.size()`) {
  //    kernel_body_generator({arg0, arg1, ... arg`arguments.size()`});
  //  }
  //
  //  ...
  //  call @`kernel_name`(arguments[0], arguments[1] ...)
  //  ...
  //
  // If a function called `kernel_name` is already present in the module then
  // that function is re-used.  In that sense we&apos;re using the llvm::Module as a
  // cache of outlined kernels, keyed by function name.
  //
  // If any of the values in `arguments` is nullptr (i.e. a nullptr
  // llvm::Value*) then we ignore it when generating LLVM IR, and instead pass
  // in a nullptr llvm::Value* in its position to `kernel_body_generator`.
  // Currently we only support at most one nullptr value in `arguments`.</doc>
<def f='tensorflow/tensorflow/compiler/xla/service/llvm_ir/kernel_support_library.cc' l='67' ll='132' type='static void xla::KernelSupportLibrary::EmitAndCallOutlinedKernel(bool enable_fast_math, bool optimize_for_size, llvm::IRBuilder&lt;&gt; * ir_builder, tensorflow::StringPiece kernel_name, KernelSupportLibrary::ArgumentVector arguments, const std::function&lt;void (KernelSupportLibrary::ArgumentVector)&gt; &amp; kernel_body_generator)'/>
