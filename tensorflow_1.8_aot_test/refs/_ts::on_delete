<dec f='include/python3.5m/pystate.h' l='134' type='void (*)(void *)'/>
<offset>1408</offset>
<doc f='include/python3.5m/pystate.h' l='111'>/* Called when a thread state is deleted normally, but not when it
     * is destroyed after fork().
     * Pain:  to prevent rare but fatal shutdown errors (issue 18808),
     * Thread.join() must wait for the join&apos;ed thread&apos;s tstate to be unlinked
     * from the tstate chain.  That happens at the end of a thread&apos;s life,
     * in pystate.c.
     * The obvious way doesn&apos;t quite work:  create a lock which the tstate
     * unlinking code releases, and have Thread.join() wait to acquire that
     * lock.  The problem is that we _are_ at the end of the thread&apos;s life:
     * if the thread holds the last reference to the lock, decref&apos;ing the
     * lock will delete the lock, and that may trigger arbitrary Python code
     * if there&apos;s a weakref, with a callback, to the lock.  But by this time
     * _PyThreadState_Current is already NULL, so only the simplest of C code
     * can be allowed to run (in particular it must not be possible to
     * release the GIL).
     * So instead of holding the lock directly, the tstate holds a weakref to
     * the lock:  that&apos;s the value of on_delete_data below.  Decref&apos;ing a
     * weakref is harmless.
     * on_delete points to _threadmodule.c&apos;s static release_sentinel() function.
     * After the tstate is unlinked, release_sentinel is called with the
     * weakref-to-lock (on_delete_data) argument, and release_sentinel releases
     * the indirectly held lock.
     */</doc>
