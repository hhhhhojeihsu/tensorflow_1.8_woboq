<dec f='tensorflow/tensorflow/core/lib/core/threadpool.h' l='90' type='void tensorflow::thread::ThreadPool::ParallelForWithWorkerId(int64 total, int64 cost_per_unit, const std::function&lt;void (int64, int64, int)&gt; &amp; fn)'/>
<doc f='tensorflow/tensorflow/core/lib/core/threadpool.h' l='75'>// Shards the &quot;total&quot; units of work. For more details, see &quot;ParallelFor&quot;.
  //
  // The function is passed a thread_id between 0 and NumThreads() *inclusive*.
  // This is because some work can happen on the caller thread while the threads
  // in the pool are also being used.
  //
  // The caller can allocate NumThreads() + 1 separate buffers for each thread.
  // Each thread can safely write to the buffer given by its id without
  // synchronization. However, the worker fn may be called multiple times
  // sequentially with the same id.
  //
  // At most NumThreads() unique ids will actually be used, and only a few may
  // be used for small workloads. If each buffer is expensive, the buffers
  // should be stored in an array initially filled with null, and a buffer
  // should be allocated by fn the first time that the id is used.</doc>
<use f='tensorflow/tensorflow/core/kernels/bincount_op.cc' l='64' u='c' c='_ZN10tensorflow7functor15BincountFunctorIN5Eigen16ThreadPoolDeviceET_E7ComputeEPNS_15OpKernelContextERKNS2_9TensorMapINS2_6TensorIKiLi1ELi1ElEELi16ENS5362374'/>
<def f='tensorflow/tensorflow/core/lib/core/threadpool.cc' l='133' ll='145' type='void tensorflow::thread::ThreadPool::ParallelForWithWorkerId(int64 total, int64 cost_per_unit, const std::function&lt;void (int64, int64, int)&gt; &amp; fn)'/>
