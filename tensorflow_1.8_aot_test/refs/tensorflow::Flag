<def f='tensorflow/tensorflow/core/util/command_line_flags.h' l='63' ll='118'/>
<size>224</size>
<doc f='tensorflow/tensorflow/core/util/command_line_flags.h' l='26'>// N.B. This library is for INTERNAL use only.
//
// This is a simple command-line argument parsing module to help us handle
// parameters for C++ binaries. The recommended way of using it is with local
// variables and an initializer list of Flag objects, for example:
//
// int some_int = 10;
// bool some_switch = false;
// string some_name = &quot;something&quot;;
// std::vector&lt;tensorFlow::Flag&gt; flag_list = {
//   Flag(&quot;some_int&quot;, &amp;some_int, &quot;an integer that affects X&quot;),
//   Flag(&quot;some_switch&quot;, &amp;some_switch, &quot;a bool that affects Y&quot;),
//   Flag(&quot;some_name&quot;, &amp;some_name, &quot;a string that affects Z&quot;)
// };
// // Get usage message before ParseFlags() to capture default values.
// string usage = Flag::Usage(argv[0], flag_list);
// bool parsed_values_ok = Flags::Parse(&amp;argc, argv, flag_list);
//
// tensorflow::port::InitMain(usage.c_str(), &amp;argc, &amp;argv);
// if (argc != 1 || !parsed_values_ok) {
//    ...output usage and error message...
// }
//
// The argc and argv values are adjusted by the Parse function so all that
// remains is the program name (at argv[0]) and any unknown arguments fill the
// rest of the array. This means you can check for flags that weren&apos;t understood
// by seeing if argv is greater than 1.
// The result indicates if there were any errors parsing the values that were
// passed to the command-line switches. For example, --some_int=foo would return
// false because the argument is expected to be an integer.
//
// NOTE: Unlike gflags-style libraries, this library is intended to be
// used in the `main()` function of your binary. It does not handle
// flag definitions that are scattered around the source code.

// A description of a single command line flag, holding its name, type, usage
// text, and a pointer to the corresponding variable.</doc>
<fun r='_ZN10tensorflow4FlagC1EPKcPiRKSs'/>
<fun r='_ZN10tensorflow4FlagC1EPKcPxRKSs'/>
<fun r='_ZN10tensorflow4FlagC1EPKcPbRKSs'/>
<fun r='_ZN10tensorflow4FlagC1EPKcPSsRKSs'/>
<fun r='_ZN10tensorflow4FlagC1EPKcPfRKSs'/>
<fun r='_ZN10tensorflow4FlagC1EPKcSt8functionIFbiEEiRKSs'/>
<fun r='_ZN10tensorflow4FlagC1EPKcSt8functionIFbxEExRKSs'/>
<fun r='_ZN10tensorflow4FlagC1EPKcSt8functionIFbfEEfRKSs'/>
<fun r='_ZN10tensorflow4FlagC1EPKcSt8functionIFbbEEbRKSs'/>
<fun r='_ZN10tensorflow4FlagC1EPKcSt8functionIFbSsEESsRKSs'/>
<fun r='_ZNK10tensorflow4Flag5ParseESsPb'/>
<mbr r='tensorflow::Flag::name_' o='0' t='string'/>
<mbr r='tensorflow::Flag::type_' o='64' t='enum (anonymous enum at /root/.cache/bazel/_bazel_root/68a62076e91007a7908bc42a32e4cff9/execroot/org_tensorflow/./tensorflow/core/util/command_line_flags.h:94:3)'/>
<mbr r='tensorflow::Flag::int32_hook_' o='128' t='std::function&lt;bool (int32)&gt;'/>
<mbr r='tensorflow::Flag::int32_default_for_display_' o='384' t='int32'/>
<mbr r='tensorflow::Flag::int64_hook_' o='448' t='std::function&lt;bool (int64)&gt;'/>
<mbr r='tensorflow::Flag::int64_default_for_display_' o='704' t='int64'/>
<mbr r='tensorflow::Flag::float_hook_' o='768' t='std::function&lt;bool (float)&gt;'/>
<mbr r='tensorflow::Flag::float_default_for_display_' o='1024' t='float'/>
<mbr r='tensorflow::Flag::bool_hook_' o='1088' t='std::function&lt;bool (bool)&gt;'/>
<mbr r='tensorflow::Flag::bool_default_for_display_' o='1344' t='bool'/>
<mbr r='tensorflow::Flag::string_hook_' o='1408' t='std::function&lt;bool (string)&gt;'/>
<mbr r='tensorflow::Flag::string_default_for_display_' o='1664' t='string'/>
<mbr r='tensorflow::Flag::usage_text_' o='1728' t='string'/>
