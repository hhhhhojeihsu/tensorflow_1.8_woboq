<dec f='tensorflow/tensorflow/compiler/xla/service/hlo_sharding.h' l='230' type='xla::HloSharding xla::HloSharding::TransformShardedTileShape(const xla::Shape &amp; new_shape, const std::function&lt;int64 (int64, int64)&gt; &amp; transform = nullptr) const'/>
<doc f='tensorflow/tensorflow/compiler/xla/service/hlo_sharding.h' l='221'>// Return a new sharding that can apply to the given new shape.
  // If this sharding is tile-maximal, the returned sharding will be the same as
  // this sharding. If this sharding is not tile-maximal, the returned
  // sharding&apos;s tile size will differ:
  //   - Non-sharded dimensions will be adapted to be the same as `new_shape`;
  //     tile_dimension(i) = new_shape.dimensions(i);
  //   - Sharded dimensions will be kept the same unless `transform` is supplied
  //     in which case tile_dimension(i) = transform(i, tile_dimension(i));
  // REQUIRES: !IsTuple().</doc>
<def f='tensorflow/tensorflow/compiler/xla/service/hlo_sharding.cc' l='353' ll='377' type='xla::HloSharding xla::HloSharding::TransformShardedTileShape(const xla::Shape &amp; new_shape, const std::function&lt;int64 (int64, int64)&gt; &amp; transform = nullptr) const'/>
