<dec f='tensorflow/tensorflow/core/public/session.h' l='268' type='tensorflow::Status tensorflow::Reset(const tensorflow::SessionOptions &amp; options, const std::vector&lt;string&gt; &amp; containers)'/>
<use f='tensorflow/tensorflow/c/c_api.cc' l='390' u='c' c='_ZN10tensorflow12_GLOBAL__N_115TF_Reset_HelperEPK17TF_SessionOptionsPPKciP9TF_Status'/>
<doc f='tensorflow/tensorflow/core/public/session.h' l='243'>/// \brief Resets resource containers associated with a target.
///
/// Reset() allows misbehaving or slow sessions to be aborted and closed, and
/// causes their resources eventually to be released.  Reset() does not wait
/// for the computations in old sessions to cease; it merely starts the
/// process of tearing them down.  However, if a new session is started after
/// a Reset(), the new session is isolated from changes that old sessions
/// (started prior to the Reset()) may continue to make to resources, provided
/// all those resources are in containers listed in &quot;containers&quot;.
///
/// Old sessions may continue to have side-effects on resources not in
/// containers listed in &quot;containers&quot;, and thus may affect future
/// sessions&apos; results in ways that are hard to predict.  Thus, if well-defined
/// behavior is desired, it is recommended that all containers be listed in
/// &quot;containers&quot;.
///
/// `containers` is a vector of string representation of resource container
/// names. When a resource container is reset, the resources held by the
/// container will be released. In particular, all Variables in the container
/// will become undefined.  If the &quot;containers&quot; vector is empty, the default
/// container is assumed.  If the &quot;containers&quot; vector is non-empty, the
/// default container should be listed explicitly.
///
/// If Reset succeeds, this function will return `OK()`. Otherwise, this
/// function will return an error status.</doc>
<def f='tensorflow/tensorflow/core/common_runtime/session.cc' l='79' ll='84' type='tensorflow::Status tensorflow::Reset(const tensorflow::SessionOptions &amp; options, const std::vector&lt;string&gt; &amp; containers)'/>
