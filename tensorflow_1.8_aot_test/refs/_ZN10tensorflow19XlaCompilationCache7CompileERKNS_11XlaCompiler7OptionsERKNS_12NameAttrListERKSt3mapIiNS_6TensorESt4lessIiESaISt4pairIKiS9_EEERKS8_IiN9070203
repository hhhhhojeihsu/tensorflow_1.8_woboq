<dec f='tensorflow/tensorflow/compiler/jit/xla_compilation_cache.h' l='65' type='tensorflow::Status tensorflow::XlaCompilationCache::Compile(const XlaCompiler::Options &amp; options, const tensorflow::NameAttrList &amp; function, const std::map&lt;int, Tensor&gt; &amp; constant_args, const std::map&lt;int, OptionalTensor&gt; &amp; variable_args, tensorflow::OpKernelContext * ctx, const XlaCompiler::CompilationResult ** compilation_result, xla::LocalExecutable ** executable, const XlaCompiler::CompileOptions * compile_options)'/>
<use f='tensorflow/tensorflow/compiler/jit/kernels/xla_launch_op.cc' l='169' u='c' c='_ZN10tensorflow16XlaLocalLaunchOp7ComputeEPNS_15OpKernelContextE'/>
<doc f='tensorflow/tensorflow/compiler/jit/xla_compilation_cache.h' l='52'>// Compiles a function into a XlaCompiler::CompilationResult that can be used
  // to execute an XLA Computation. Compilation results are cached.
  // `function` is the name of a Tensorflow function to compile.
  // `constant_args` is a map of tensorflow argument number to its constant
  //  value.
  // `variable_args` is a snapshot of the current values of the
  // resource variable arguments to `function`; uninitialized variables are
  // represented by an absent OptionalTensor.
  // The result of compilation is written to `*compilation_result`, which must
  // be non-null. If `executable` is non-null, also builds an
  // xla::LocalExecutable and sets `executable` to point to it. The resulting
  // executable pointer may be null if the computation has no non-constant
  // outputs.</doc>
<def f='tensorflow/tensorflow/compiler/jit/xla_compilation_cache.cc' l='210' ll='219' type='tensorflow::Status tensorflow::XlaCompilationCache::Compile(const XlaCompiler::Options &amp; options, const tensorflow::NameAttrList &amp; function, const std::map&lt;int, Tensor&gt; &amp; constant_args, const std::map&lt;int, OptionalTensor&gt; &amp; variable_args, tensorflow::OpKernelContext * ctx, const XlaCompiler::CompilationResult ** compilation_result, xla::LocalExecutable ** executable, const XlaCompiler::CompileOptions * compile_options)'/>
