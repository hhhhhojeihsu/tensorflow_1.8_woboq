<dec f='tensorflow/tensorflow/core/common_runtime/collective_param_resolver_local.h' l='107' type='tensorflow::mutex'/>
<use f='tensorflow/tensorflow/core/common_runtime/collective_param_resolver_local.h' l='108'/>
<use f='tensorflow/tensorflow/core/common_runtime/collective_param_resolver_local.h' l='109'/>
<use f='tensorflow/tensorflow/core/common_runtime/collective_param_resolver_local.cc' l='497' u='a' c='_ZN10tensorflow28CollectiveParamResolverLocal15FindInstanceRecEPNS0_8GroupRecEPNS_16CollectiveParamsERKSt8functionIFvRKNS_6StatusEPNS0_11InstanceRecEEE'/>
<use f='tensorflow/tensorflow/core/common_runtime/collective_param_resolver_local.cc' l='528' u='a' c='_ZN10tensorflow28CollectiveParamResolverLocal15FindInstanceRecEPNS0_8GroupRecEPNS_16CollectiveParamsERKSt8functionIFvRKNS_6StatusEPNS0_11InstanceRecEEE'/>
<offset>0</offset>
<doc f='tensorflow/tensorflow/core/common_runtime/collective_param_resolver_local.h' l='83'>// This structure has two mutexes so that a possibly long
    // initialization can be done without holding the instance_mu_
    // table lock the whole time (which can cause an excessive number
    // of threads to block on it), and because the compiler may not
    // permit mutex locks to be taken in more than one order.
    //
    // out_mu guards access to most of the fields.
    // in_mu guards access to a queue of comsumer callbacks wanting to
    // read the fields guarded by out_mu.
    //
    // The in_mu should be locked only while holding instance_mu_; the
    // out_mu should be locked only while not holding
    // instance_mu_.
    //
    // When is_init is false (the initial value) any potential user
    // other than the creator should queue a callback on init_waiters.
    // As soon as the shared member of this structure is fully
    // initialized is_init will be set true and those callbacks will
    // be invoked.
    //
    // Once inserted in the table this structure will never be replaced
    // so users can capture the pointer while holding instance_mu_,
    // drop that lock, then take a lock on out_mu before
    // reading/modifying its values.</doc>
