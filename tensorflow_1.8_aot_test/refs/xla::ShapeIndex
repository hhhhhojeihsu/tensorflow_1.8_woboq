<def f='tensorflow/tensorflow/compiler/xla/shape_util.h' l='59' ll='97'/>
<size>24</size>
<doc f='tensorflow/tensorflow/compiler/xla/shape_util.h' l='40'>// An index for specifying a particular nested subshape within a shape. Used in
// ShapeUtil::GetSubshape and other interfaces. Shapes are recursive data
// structures (trees) and ShapeIndex defines a path through the tree where each
// element of ShapeIndex indexes into a tuple (or nested tuple) within the
// shape. For a non-nested tuple, an index has a single element. For example,
// given a 3-element tuple (a, b, c) containing arrays a, b, and c, the index
// {1} corresponds to array b. For a nested tuple, the index can have more than
// one element. For the nested tuple (a, (b, c, d), e) below are the values
// corresponding to the given indices:
//
//   index {0}    : array a
//   index {1, 2} : array d
//   index {2}    : array e
//   index {0, 0} : invalid index (element at {0} is an array not a tuple)
//
// For indexing into array shapes, the index is always trivially empty, ie {}.
//
// ShapeIndex is a trivial wrapper around std::vector with a minimum number of
// methods implemented.</doc>
<fun r='_ZN3xla10ShapeIndexC1Ev'/>
<fun r='_ZN3xla10ShapeIndexC1ESt16initializer_listIxE'/>
<fun r='_ZNK3xla10ShapeIndex5emptyEv'/>
<fun r='_ZNK3xla10ShapeIndex4sizeEv'/>
<fun r='_ZN3xla10ShapeIndex9push_backEx'/>
<fun r='_ZN3xla10ShapeIndex8pop_backEv'/>
<fun r='_ZN3xla10ShapeIndex10push_frontEx'/>
<fun r='_ZNK3xla10ShapeIndex5beginEv'/>
<fun r='_ZNK3xla10ShapeIndex3endEv'/>
<fun r='_ZN3xla10ShapeIndex5beginEv'/>
<fun r='_ZN3xla10ShapeIndex3endEv'/>
<fun r='_ZNK3xla10ShapeIndex4dataEv'/>
<fun r='_ZNK3xla10ShapeIndex4backEv'/>
<fun r='_ZN3xla10ShapeIndex4backEv'/>
<fun r='_ZNK3xla10ShapeIndexixEm'/>
<fun r='_ZN3xla10ShapeIndexixEm'/>
<fun r='_ZNK3xla10ShapeIndexeqERKS0_'/>
<fun r='_ZNK3xla10ShapeIndexneERKS0_'/>
<fun r='_ZNK3xla10ShapeIndexltERKS0_'/>
<fun r='_ZNK3xla10ShapeIndex8ToStringEv'/>
<mbr r='xla::ShapeIndex::indices_' o='0' t='std::vector&lt;int64&gt;'/>
