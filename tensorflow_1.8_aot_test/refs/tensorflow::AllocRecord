<def f='tensorflow/tensorflow/core/framework/tracking_allocator.h' l='47' ll='54'/>
<size>16</size>
<doc f='tensorflow/tensorflow/core/framework/tracking_allocator.h' l='30'>// TrackingAllocator is a wrapper for an Allocator. It keeps a running
// count of the number of bytes allocated through the wrapper. It is
// used by the Executor to &quot;charge&quot; allocations to particular Op
// executions. Each Op gets a separate TrackingAllocator wrapper
// around the underlying allocator.
//
// The implementation assumes the invariant that all calls to
// AllocateRaw by an Op (or work items spawned by the Op) will occur
// before the Op&apos;s Compute method returns. Thus the high watermark is
// established once Compute returns.
//
// DeallocateRaw can be called long after the Op has finished,
// e.g. when an output tensor is deallocated, and the wrapper cannot
// be deleted until the last of these calls has occurred.  The
// TrackingAllocator keeps track of outstanding calls using a
// reference count, and deletes itself once the last call has been
// received and the high watermark has been retrieved.</doc>
<fun r='_ZN10tensorflow11AllocRecordC1Exx'/>
<fun r='_ZN10tensorflow11AllocRecordC1Ev'/>
<mbr r='tensorflow::AllocRecord::alloc_bytes' o='0' t='int64'/>
<mbr r='tensorflow::AllocRecord::alloc_micros' o='64' t='int64'/>
