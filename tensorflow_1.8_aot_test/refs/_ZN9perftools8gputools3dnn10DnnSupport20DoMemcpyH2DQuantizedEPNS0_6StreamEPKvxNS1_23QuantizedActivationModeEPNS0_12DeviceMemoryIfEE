<dec f='tensorflow/tensorflow/stream_executor/dnn.h' l='1968' type='bool perftools::gputools::dnn::DnnSupport::DoMemcpyH2DQuantized(perftools::gputools::Stream * stream, const void * host_src, int64 size, perftools::gputools::dnn::QuantizedActivationMode mode, DeviceMemory&lt;float&gt; * gpu_unquantized_dst)'/>
<doc f='tensorflow/tensorflow/stream_executor/dnn.h' l='1951'>// Enqueues an asynchronous memcpy of &apos;host_dst&apos; into the *quantized* input
  // of a layer (that is, bytes instead of scaled floats) if they are supported
  // by the underlying DNN implementation. If this quantized input is not
  // supported, false is returned, which will place &apos;stream&apos; into an error
  // state.
  //
  // Arguments (all borrowed):
  //  stream: borrowed pointer to the stream that the &apos;quantized memcpy&apos;
  //    operation should be enqueued onto.
  //  host_src: un-owned host memory region that contains the quantized data.
  //  size: size in bytes of the host_src host memory region.
  //  mode: Type of quantization of the data to read from host_src.
  //  gpu_unquantized_dst: the device memory that is clobbered by the values in
  //    &apos;host_src&apos; when the enqueued (asynchronous) memcpy operation is
  //    performed. -- this data should also have a corresponding quantized
  //    representation on the device for this operation to
  //    succeed.</doc>
<use f='tensorflow/tensorflow/stream_executor/stream.cc' l='1854' u='c' c='_ZN9perftools8gputools6Stream22ThenMemcpyH2DQuantizedEPKvyNS0_3dnn23QuantizedActivationModeEPNS0_12DeviceMemoryIfEE'/>
