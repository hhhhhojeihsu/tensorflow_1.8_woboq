<dec f='include/python3.5m/ceval.h' l='72' type='void Py_SetRecursionLimit(int )'/>
<doc f='include/python3.5m/ceval.h' l='47'>/* Protection against deeply nested recursive calls

   In Python 3.0, this protection has two levels:
   * normal anti-recursion protection is triggered when the recursion level
     exceeds the current recursion limit. It raises a RecursionError, and sets
     the &quot;overflowed&quot; flag in the thread state structure. This flag
     temporarily *disables* the normal protection; this allows cleanup code
     to potentially outgrow the recursion limit while processing the
     RecursionError.
   * &quot;last chance&quot; anti-recursion protection is triggered when the recursion
     level exceeds &quot;current recursion limit + 50&quot;. By construction, this
     protection can only be triggered when the &quot;overflowed&quot; flag is set. It
     means the cleanup code has itself gone into an infinite loop, or the
     RecursionError has been mistakingly ignored. When this protection is
     triggered, the interpreter aborts with a Fatal Error.

   In addition, the &quot;overflowed&quot; flag is automatically reset when the
   recursion level drops below &quot;current recursion limit - 50&quot;. This heuristic
   is meant to ensure that the normal anti-recursion protection doesn&apos;t get
   disabled too long.

   Please note: this scheme has its own limitations. See:
   http://mail.python.org/pipermail/python-dev/2008-August/082106.html
   for some observations.
*/</doc>
