<def f='tensorflow/tensorflow/core/framework/allocator.h' l='355' ll='382'/>
<size>8</size>
<doc f='tensorflow/tensorflow/core/framework/allocator.h' l='335'>// A tensorflow Op may need access to different kinds of memory that
// are not simply a function of the device to which the Op has been
// assigned.  For example, an Op executing on a GPU may still need
// to allocate CPU RAM for some purpose.  Internal to the tensorflow
// runtime we may choose to allocate CPU ram from special regions
// that have been prepared for higher performance in some use
// contexts, e.g. doing DMA with particular devices.  For these
// reasons, the Device interface does not expose just one memory
// Allocator, but instead provides an accessor that takes a
// specification of the desired memory attributes in order to select
// an Allocator.
//
// Example use:
//  // Allocator for ordinary device memory:
//  Allocator* a = allocator(AllocatorAttributes());
// ...
//  // Allocator for CPU RAM, regardless of where Op is executing:
//  AllocatorAttributes attr;
//  attr.set_on_host(true);
//  Allocator* a = allocator(attr);</doc>
<fun r='_ZN10tensorflow19AllocatorAttributes11set_on_hostEb'/>
<fun r='_ZNK10tensorflow19AllocatorAttributes7on_hostEv'/>
<fun r='_ZN10tensorflow19AllocatorAttributes18set_nic_compatibleEb'/>
<fun r='_ZNK10tensorflow19AllocatorAttributes14nic_compatibleEv'/>
<fun r='_ZN10tensorflow19AllocatorAttributes18set_gpu_compatibleEb'/>
<fun r='_ZNK10tensorflow19AllocatorAttributes14gpu_compatibleEv'/>
<fun r='_ZN10tensorflow19AllocatorAttributes5MergeES0_'/>
<fun r='_ZNK10tensorflow19AllocatorAttributes28IsEqualOrLessRestrictiveThanERKS0_'/>
<mbr r='tensorflow::AllocatorAttributes::value' o='0' t='uint32'/>
<mbr r='tensorflow::AllocatorAttributes::scope_id' o='32' t='int32'/>
