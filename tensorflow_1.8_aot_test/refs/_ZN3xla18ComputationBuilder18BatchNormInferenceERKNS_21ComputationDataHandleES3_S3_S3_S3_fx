<dec f='tensorflow/tensorflow/compiler/xla/client/computation_builder.h' l='759' type='xla::ComputationDataHandle xla::ComputationBuilder::BatchNormInference(const xla::ComputationDataHandle &amp; operand, const xla::ComputationDataHandle &amp; scale, const xla::ComputationDataHandle &amp; offset, const xla::ComputationDataHandle &amp; mean, const xla::ComputationDataHandle &amp; variance, float epsilon, int64 feature_index)'/>
<doc f='tensorflow/tensorflow/compiler/xla/client/computation_builder.h' l='749'>// Normalizes operand across spatial and batch dimensions for each feature.
  //
  // `BatchNormInference` is equivalent to calling `BatchNormTraining` without
  // computing `mean` and `variance` for each batch inside the operation. It
  // uses the input `mean` and `variance` instead as estimated values. The
  // purpose of this op is to reduce latency in inference, hence the name
  // `BatchNormInference`.
  //
  // The output has the same shape as `operand`, and contains the normalized
  // values for each batch.</doc>
<use f='tensorflow/tensorflow/compiler/tf2xla/kernels/batch_norm_op.cc' l='82' u='c' c='_ZN10tensorflow12_GLOBAL__N_116FusedBatchNormOp7CompileEPNS_18XlaOpKernelContextE'/>
<def f='tensorflow/tensorflow/compiler/xla/client/computation_builder.cc' l='1354' ll='1369' type='xla::ComputationDataHandle xla::ComputationBuilder::BatchNormInference(const xla::ComputationDataHandle &amp; operand, const xla::ComputationDataHandle &amp; scale, const xla::ComputationDataHandle &amp; offset, const xla::ComputationDataHandle &amp; mean, const xla::ComputationDataHandle &amp; variance, float epsilon, int64 feature_index)'/>
