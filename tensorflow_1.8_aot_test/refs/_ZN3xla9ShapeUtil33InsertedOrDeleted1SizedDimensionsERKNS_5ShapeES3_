<dec f='tensorflow/tensorflow/compiler/xla/shape_util.h' l='513' type='static std::tuple&lt;bool, std::vector&lt;int64&gt;, std::vector&lt;int64&gt; &gt; xla::ShapeUtil::InsertedOrDeleted1SizedDimensions(const xla::Shape &amp; shape_pre, const xla::Shape &amp; shape_post)'/>
<doc f='tensorflow/tensorflow/compiler/xla/shape_util.h' l='502'>// If we can go from `shape_pre` to `shape_post` by merely inserting or
  // deleting 1-sized dimensions, return the indices in `shape_pre` of the
  // deleted dimensions and the indices in `dims_post` of the inserted
  // dimensions.
  // For example, if `shape_pre = {a_1, a_2, ..., a_m}` and
  // `shape_post = {b_1, b_2, ..., b_n}` where we can find some sequence of `i`s
  // and some sequence of `j`s so `a_i = 1` for each `i` and `b_j = 1` for each
  // `j` and `a_(k-s) = b_(k-t)` where `s` and `t` are the number of `i`s and
  // `j`s less than `k` for all other `k`, we return the `i`s and `j`s.
  // For another example, if `shape_pre = shape_post = {}`, we return `{}`.</doc>
<use f='tensorflow/tensorflow/compiler/xla/service/hlo_instruction.cc' l='3222' u='c' c='_ZNK3xla14HloInstruction45ReshapeMerelyInsertsOrDeletes1SizedDimensionsEv'/>
<def f='tensorflow/tensorflow/compiler/xla/shape_util.cc' l='1008' ll='1063' type='static std::tuple&lt;bool, std::vector&lt;int64&gt;, std::vector&lt;int64&gt; &gt; xla::ShapeUtil::InsertedOrDeleted1SizedDimensions(const xla::Shape &amp; shape_pre, const xla::Shape &amp; shape_post)'/>
<doc f='tensorflow/tensorflow/compiler/xla/shape_util.cc' l='1008'>/* static */</doc>
