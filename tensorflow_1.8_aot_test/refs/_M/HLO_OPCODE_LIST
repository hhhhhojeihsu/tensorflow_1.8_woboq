<dec f='tensorflow/tensorflow/compiler/xla/service/hlo_opcode.h' l='47'/>
<use f='tensorflow/tensorflow/compiler/xla/service/hlo_opcode.h' l='135' u='c'/>
<doc f='tensorflow/tensorflow/compiler/xla/service/hlo_opcode.h' l='26'>// High-level optimizer instruction opcodes -- these are linear-algebra level
// opcodes. They are a flattened form of the UnaryOp, BinaryOp, ... opcodes
// present in the XLA service protobuf.
//
// See the XLA documentation for the semantics of each opcode.
//
// Each entry has the format:
// (enum_name, opcode_name)
// or
// (enum_name, opcode_name, p1 | p2 | ...)
//
// with p1, p2, ... are members of HloOpcodeProperty. They are combined
// using bitwise-or.
//
// Note: Do not use &apos;:&apos; in opcode names. It is used as a special character
// in these places:
// - In extended opcode strings (HloInstruction::ExtendedOpcodeString()), to
//   separate the opcode from the fusion kind
// - In fully qualified names (HloInstruction::FullyQualifiedName()), to
//   separate the qualifiers (name of the computation and potentially the
//   fusion instruction) from the name</doc>
<use f='tensorflow/tensorflow/compiler/xla/service/hlo_opcode.cc' l='28' u='c'/>
<use f='tensorflow/tensorflow/compiler/xla/service/hlo_opcode.cc' l='37' u='c'/>
<use f='tensorflow/tensorflow/compiler/xla/service/hlo_opcode.cc' l='59' u='c'/>
<use f='tensorflow/tensorflow/compiler/xla/service/hlo_opcode.cc' l='69' u='c'/>
