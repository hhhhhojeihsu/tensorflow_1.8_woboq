<dec f='tensorflow/tensorflow/core/common_runtime/direct_session.h' l='322' type='void tensorflow::DirectSession::SchedClosure(thread::ThreadPool * pool, std::function&lt;void ()&gt; c)'/>
<def f='tensorflow/tensorflow/core/common_runtime/direct_session.cc' l='225' ll='238' type='void tensorflow::DirectSession::SchedClosure(thread::ThreadPool * pool, std::function&lt;void ()&gt; c)'/>
<use f='tensorflow/tensorflow/core/common_runtime/direct_session.cc' l='534' u='c' c='_ZN10tensorflow13DirectSession11RunInternalExRKNS_10RunOptionsEPNS_18CallFrameInterfaceEPNS0_16ExecutorsAndKeysEPNS_11RunMetadataE'/>
<use f='tensorflow/tensorflow/core/common_runtime/direct_session.cc' l='546' u='c' c='_ZN10tensorflow13DirectSession11RunInternalExRKNS_10RunOptionsEPNS_18CallFrameInterfaceEPNS0_16ExecutorsAndKeysEPNS_11RunMetadataE'/>
<use f='tensorflow/tensorflow/core/common_runtime/direct_session.cc' l='772' u='c' c='_ZN10tensorflow13DirectSession9PRunSetupERKSt6vectorISsSaISsEES5_S5_PSs'/>
<doc f='tensorflow/tensorflow/core/common_runtime/direct_session.cc' l='210'>// NOTE: On Android with a single device, there is never
// a risk of an OpKernel blocking indefinitely:
//
// 1) No operations do I/O that depends on other simultaneous kernels,
//
// 2) Recv nodes always complete immediately: The inputs are sent into
//    the local rendezvous before we start the executor, so the
//    corresponding recvs will not block.
//
// Based on these assumptions, we can use the same thread pool for
// both &quot;non-blocking&quot; and &quot;blocking&quot; OpKernels on Android.
//
// This may change down the road when we add support for multiple
// devices that run concurrently, in which case we will need to
// revisit this decision.</doc>
<doc f='tensorflow/tensorflow/core/common_runtime/direct_session.h' l='321'>// Schedules &apos;c&apos; for execution on pool.</doc>
