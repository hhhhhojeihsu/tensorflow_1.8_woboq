<def f='include/python3.5m/longintrepr.h' l='89' ll='92'/>
<size>32</size>
<doc f='include/python3.5m/longintrepr.h' l='74'>/* Long integer representation.
   The absolute value of a number is equal to
   	SUM(for i=0 through abs(ob_size)-1) ob_digit[i] * 2**(SHIFT*i)
   Negative numbers are represented with ob_size &lt; 0;
   zero is represented by ob_size == 0.
   In a normalized number, ob_digit[abs(ob_size)-1] (the most significant
   digit) is never zero.  Also, in all cases, for all valid i,
   	0 &lt;= ob_digit[i] &lt;= MASK.
   The allocation function takes care of allocating extra memory
   so that ob_digit[0] ... ob_digit[abs(ob_size)-1] are actually available.

   CAUTION:  Generic code manipulating subtypes of PyVarObject has to
   aware that ints abuse  ob_size&apos;s sign bit.
*/</doc>
<mbr r='_longobject::ob_base' o='0' t='PyVarObject'/>
<mbr r='_longobject::ob_digit' o='192' t='digit [1]'/>
