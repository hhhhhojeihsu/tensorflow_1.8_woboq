<dec f='tensorflow/tensorflow/core/kernels/range_sampler.h' l='74' type='void tensorflow::RangeSampler::SampleBatchGetExpectedCount(random::SimplePhilox * rnd, bool unique, gtl::MutableArraySlice&lt;int64&gt; batch, gtl::MutableArraySlice&lt;float&gt; batch_expected_count, gtl::ArraySlice&lt;int64&gt; extras, gtl::MutableArraySlice&lt;float&gt; extras_expected_count) const'/>
<use f='tensorflow/tensorflow/core/kernels/candidate_sampler_ops.cc' l='92' u='c' c='_ZN10tensorflow22BaseCandidateSamplerOp7ComputeEPNS_15OpKernelContextE'/>
<doc f='tensorflow/tensorflow/core/kernels/range_sampler.h' l='55'>// Fill &quot;batch&quot; with samples from the distribution, and report
  // &quot;expected counts&quot;.
  //
  // The &quot;expected count&quot; of a value is an estimate of the expected
  // number of occurrences of the value in the batch returned by a
  // call to this function with the given parameters.  If unique=true,
  // the expected count is an inclusion probability.  For details on
  // this estimation, see the comment to &quot;ExpectedCountHelper&quot; in the
  // .cc file.
  //
  // Expected counts for the elements of the returned &quot;batch&quot; are reported
  // in the aligned array &quot;batch_expected_count&quot;.
  //
  // The user can optionally provide &quot;extras&quot;, containing values in the range.
  // The expected counts for the extras are reported in the aligned array
  // &quot;extras_expected_count&quot;.
  //
  // &quot;batch_expected_count&quot; must have size equal to 0 or to the size of &quot;batch&quot;.
  // &quot;extras&quot; and &quot;extras_expected_count&quot; must have equal size.</doc>
<use f='tensorflow/tensorflow/core/kernels/range_sampler.cc' l='39' u='c' c='_ZNK10tensorflow12RangeSampler11SampleBatchEPNS_6random12SimplePhiloxEbNS_3gtl17MutableArraySliceIxEE'/>
<def f='tensorflow/tensorflow/core/kernels/range_sampler.cc' l='44' ll='52' type='void tensorflow::RangeSampler::SampleBatchGetExpectedCount(random::SimplePhilox * rnd, bool unique, gtl::MutableArraySlice&lt;int64&gt; batch, gtl::MutableArraySlice&lt;float&gt; batch_expected_count, gtl::ArraySlice&lt;int64&gt; extras, gtl::MutableArraySlice&lt;float&gt; extras_expected_count) const'/>
