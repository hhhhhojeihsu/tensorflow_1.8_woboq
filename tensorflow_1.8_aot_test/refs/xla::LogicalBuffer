<def f='tensorflow/tensorflow/compiler/xla/service/logical_buffer.h' l='85' ll='168'/>
<size>56</size>
<doc f='tensorflow/tensorflow/compiler/xla/service/logical_buffer.h' l='36'>// Class describing a contiguous sequence of elements (ie, C array) which form
// the components of Shaped values in XLA. XLA arrays are trivially a
// single LogicalBuffer. Tuple values are made up of more than one
// LogicalBuffer: a LogicalBuffer for the pointers to elements, and a
// LogicalBuffer for each child element.
//
// Every buffer is defined by a particular instruction and most instructions
// define only a single buffer. Instructions which define a single buffer
// include array-shaped instructions such as Add but also includes Tuple-shaped
// instructions such as Tuple. The Tuple instruction defines a single buffer
// which is a vector of pointers to the buffers containing the Tuple
// instruction&apos;s operands. Though the result of the Tuple instruction includes
// multiple buffers only the top-level buffer (the vector of pointers) is
// defined by the Tuple instruction. The buffers containing the tuple elements
// are defined by earlier instructions, usually the operands of the Tuple
// instruction.
//
// Instructions which construct both the tuple *and* the tuple elements define
// more than one buffer. This includes (at least) tuple-shaped Constant,
// Parameter, Infeed and While instructions. The tuple-shaped instructions do
// not assemble a tuple from existing buffers like the Tuple instruction does,
// but rather define the entire tuple.
//
// Some instructions, such as Bitcast, define no buffers. These instructions
// simply forward buffers from their operands.
//
// The LogicalBuffer object describes which HLO instruction defines a buffer and
// where within that instruction&apos;s output shape the buffer is defined. The
// location within the output shape is indicated by LogicalBuffer::index() which
// is defined identically to the index used in
// ShapeUtil::GetSubshape(). Examples:
//
// %add = Add(%foo, %bar)
// %tuple_constant = Constant({1, {42, 43}})
//
// %add defines a single array-shaped buffer LogicalBuffer(%add, {}) which holds
// the array result of the add operation. The nested-tuple-shaped
// %tuple_constant defines 5 buffers described by the following LogicalBuffer
// objects:
//
//   LogicalBuffer(%tuple_constant, {})      // &quot;Top-level&quot; buffer: vector of
//                                           //  pointers to LogicalBuffers at
//                                           //  indices {0} and {1}
//   LogicalBuffer(%tuple_constant, {0})     // Holds value &quot;1&quot;
//   LogicalBuffer(%tuple_constant, {1})     // Holds nested tuple: vector of
//                                           //  pointers to LogicalBuffers at
//                                           //  indices {1, 0} and {1, 1}
//   LogicalBuffer(%tuple_constant, {1, 0})  // Holds value &quot;42&quot;
//   LogicalBuffer(%tuple_constant, {1, 1})  // Holds value &quot;43&quot;</doc>
<fun r='_ZN3xla13LogicalBufferC1EPNS_14HloInstructionERKNS_10ShapeIndexEx'/>
<fun r='_ZNK3xla13LogicalBuffer2idEv'/>
<fun r='_ZNK3xla13LogicalBuffer11instructionEv'/>
<fun r='_ZNK3xla13LogicalBuffer5indexEv'/>
<fun r='_ZNK3xla13LogicalBuffer5colorEv'/>
<fun r='_ZN3xla13LogicalBuffer9set_colorEN10tensorflow3gtl7IntTypeINS0_10Color_tag_ExEE'/>
<fun r='_ZNK3xla13LogicalBuffer9has_colorEv'/>
<fun r='_ZNK3xla13LogicalBuffer5shapeEv'/>
<fun r='_ZNK3xla13LogicalBuffer10IsTopLevelEv'/>
<fun r='_ZNK3xla13LogicalBuffer7IsTupleEv'/>
<fun r='_ZNK3xla13LogicalBuffer7IsArrayEv'/>
<fun r='_ZNK3xla13LogicalBufferltERKS0_'/>
<fun r='_ZNK3xla13LogicalBuffer8ToStringEv'/>
<fun r='_ZNK3xla13LogicalBuffer7ToProtoERKSt8functionIFxRKS0_EE'/>
<fun r='_ZN3xla13LogicalBuffer15ToLocationProtoERKNS_14HloInstructionERKNS_10ShapeIndexE'/>
<mbr r='xla::LogicalBuffer::kInvalidColor' o='0' t='const Color'/>
<mbr r='xla::LogicalBuffer::instruction_' o='64' t='xla::HloInstruction *'/>
<mbr r='xla::LogicalBuffer::id_' o='128' t='Id'/>
<mbr r='xla::LogicalBuffer::is_array_' o='190' t='bool'/>
<mbr r='xla::LogicalBuffer::is_tuple_' o='191' t='bool'/>
<mbr r='xla::LogicalBuffer::color_' o='192' t='Color'/>
<mbr r='xla::LogicalBuffer::index_' o='256' t='xla::ShapeIndex'/>
<fun r='_ZN3xla13LogicalBufferC1ERKS0_'/>
