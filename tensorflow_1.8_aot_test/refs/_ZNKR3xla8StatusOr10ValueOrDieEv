<dec f='tensorflow/tensorflow/compiler/xla/statusor.h' l='192' type='const T &amp; xla::StatusOr::ValueOrDie() const'/>
<def f='tensorflow/tensorflow/compiler/xla/statusor.h' l='275' ll='279' type='const T &amp; xla::StatusOr::ValueOrDie() const'/>
<doc f='tensorflow/tensorflow/compiler/xla/statusor.h' l='172'>// Returns a reference to our current value, or CHECK-fails if !this-&gt;ok().
  //
  // Note: for value types that are cheap to copy, prefer simple code:
  //
  //   T value = statusor.ValueOrDie();
  //
  // Otherwise, if the value type is expensive to copy, but can be left
  // in the StatusOr, simply assign to a reference:
  //
  //   T&amp; value = statusor.ValueOrDie();  // or `const T&amp;`
  //
  // Otherwise, if the value type supports an efficient move, it can be
  // used as follows:
  //
  //   T value = std::move(statusor).ValueOrDie();
  //
  // The std::move on statusor instead of on the whole expression enables
  // warnings about possible uses of the statusor object after the move.
  // C++ style guide waiver for ref-qualified overloads granted in cl/143176389
  // See go/ref-qualifiers for more details on such overloads.</doc>
<use f='tensorflow/tensorflow/compiler/xla/service/hlo_sharding.cc' l='142' u='c' c='_ZNK3xla11HloSharding12UniqueDeviceEv'/>
<use f='tensorflow/tensorflow/compiler/xla/service/hlo_verifier.cc' l='527' u='c' c='_ZN3xla13ShapeVerifier10CheckShapeEPKNS_14HloInstructionERKNS_8StatusOrINS_5ShapeEEE'/>
