<dec f='tensorflow/tensorflow/core/framework/op_def_builder.h' l='104' type='tensorflow::OpDefBuilder &amp; tensorflow::OpDefBuilder::Input(tensorflow::StringPiece spec)'/>
<use f='tensorflow/tensorflow/core/framework/op.h' l='217' u='c' c='_ZN10tensorflow11register_op19OpDefBuilderWrapperILb1EE5InputENS_11StringPieceE'/>
<doc f='tensorflow/tensorflow/core/framework/op_def_builder.h' l='89'>// Adds an input or output to this OpDefBuilder (and returns *this).
  // The spec has form &quot;&lt;name&gt;:&lt;type-expr&gt;&quot; or &quot;&lt;name&gt;:Ref(&lt;type-expr&gt;)&quot;
  // where &lt;name&gt; matches regexp [a-z][a-z0-9_]* and &lt;type-expr&gt; can be:
  // * For a single tensor: &lt;type&gt;
  // * For a sequence of tensors with the same type: &lt;number&gt;*&lt;type&gt;
  // * For a sequence of tensors with different types: &lt;type-list&gt;
  // Where:
  //   &lt;type&gt; is either one of &quot;float&quot;, &quot;int32&quot;, &quot;string&quot;, ...
  //                 or the name of an attr (see above) with type &quot;type&quot;.
  //   &lt;number&gt; is the name of an attr with type &quot;int&quot;.
  //   &lt;type-list&gt; is the name of an attr with type &quot;list(type)&quot;.
  // TODO(josh11b): Indicate Ref() via an optional argument instead of
  // in the spec?
  // TODO(josh11b): SparseInput() and SparseOutput() matching the Python
  // handling?</doc>
<use f='tensorflow/tensorflow/core/framework/function.cc' l='1223' u='c' c='_ZN10tensorflow17FunctionDefHelper6CreateERKSsNS_3gtl10ArraySliceISsEES5_S5_NS4_INS0_4NodeEEENS4_ISt4pairISsSsEEE'/>
<use f='tensorflow/tensorflow/core/framework/function.cc' l='1251' u='c' c='_ZN10tensorflow17FunctionDefHelper6DefineERKSsNS_3gtl10ArraySliceISsEES5_S5_NS4_INS0_4NodeEEE'/>
<def f='tensorflow/tensorflow/core/framework/op_def_builder.cc' l='538' ll='541' type='tensorflow::OpDefBuilder &amp; tensorflow::OpDefBuilder::Input(tensorflow::StringPiece spec)'/>
