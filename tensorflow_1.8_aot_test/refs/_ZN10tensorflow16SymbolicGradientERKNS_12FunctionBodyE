<dec f='tensorflow/tensorflow/core/common_runtime/function.h' l='154' type='tensorflow::FunctionBody * tensorflow::SymbolicGradient(const tensorflow::FunctionBody &amp; f)'/>
<doc f='tensorflow/tensorflow/core/common_runtime/function.h' l='144'>// Given a numerical function &quot;f&quot;, returns another numerical function
// &quot;g&quot;, such that if &quot;f&quot; takes N inputs and produces M outputs, &quot;g&quot;
// takes N + M inputs and produces N outputs. I.e., if
//   (y1, y2, ..., y_M) = f(x1, x2, ..., x_N),
// g is a function which is
//   (dL/dx1, dL/dx2, ..., dL/dx_N) = g(x1, x2, ..., x_N,
//                                     dL/dy1, dL/dy2, ..., dL/dy_M),
// where L is a scalar-value function of (...x_i...).
//
// TODO(zhifengc): Asks math expert to say the comment again.</doc>
<use f='tensorflow/tensorflow/core/common_runtime/function.cc' l='471' u='c' c='_ZN10tensorflow26FunctionLibraryRuntimeImpl27InstantiateSymbolicGradientERKNS_12NameAttrListEPKNS_25FunctionLibraryDefinitionEPPNS_12FunctionBodyE'/>
<def f='tensorflow/tensorflow/core/common_runtime/function.cc' l='1600' ll='1602' type='tensorflow::FunctionBody * tensorflow::SymbolicGradient(const tensorflow::FunctionBody &amp; f)'/>
