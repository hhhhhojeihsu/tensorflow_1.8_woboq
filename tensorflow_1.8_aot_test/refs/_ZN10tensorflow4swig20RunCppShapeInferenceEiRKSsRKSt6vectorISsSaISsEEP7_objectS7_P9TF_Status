<dec f='tensorflow/tensorflow/python/framework/cpp_shape_inference.h' l='44' type='std::vector&lt;string&gt; tensorflow::swig::RunCppShapeInference(int graph_def_version, const string &amp; serialized_node_def, const std::vector&lt;string&gt; &amp; input_serialized_shapes, PyObject * input_constant_tensor_values, const std::vector&lt;string&gt; &amp; input_constant_tensor_as_shape_values, TF_Status * out_status)'/>
<def f='tensorflow/tensorflow/python/framework/cpp_shape_inference.cc' l='173' ll='205' type='std::vector&lt;string&gt; tensorflow::swig::RunCppShapeInference(int graph_def_version, const string &amp; serialized_node_def, const std::vector&lt;string&gt; &amp; input_serialized_shapes, PyObject * input_constant_tensor_values, const std::vector&lt;string&gt; &amp; input_constant_tensor_as_shape_values, TF_Status * out_status)'/>
<doc f='tensorflow/tensorflow/python/framework/cpp_shape_inference.h' l='29'>// Calls the registered C++ shape inference function for &lt;node&gt; (a serialized
// NodeDef).
// Should not be called for shape functions that access input tensors; constant
// input tensor values are not made available, and so the inferred shapes will
// be less precise than they could be.
//
// Returns an error, or OK, in &lt;out_status&gt; according to whether the shape
// inference was successful.
//
// On success, returns a vector populated with the inferred output shapes (as
// serialized CppShapeInferenceResult protos) followed by a serialized
// CppShapeInferenceInputsNeeded proto.
//
// This is temporary code to be used during the migration
// from python shape inference functions to C++ shape inference functions.</doc>
