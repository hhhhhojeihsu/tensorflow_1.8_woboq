<dec f='tensorflow/tensorflow/python/client/tf_session_helper.h' l='112' type='void tensorflow::TF_PRun_wrapper(TF_DeprecatedSession * session, const char * handle, PyObject * feed_dict, const NameVector &amp; output_names, TF_Status * out_status, PyObjectVector * out_values)'/>
<def f='tensorflow/tensorflow/python/client/tf_session_helper.cc' l='327' ll='333' type='void tensorflow::TF_PRun_wrapper(TF_DeprecatedSession * session, const char * handle, PyObject * feed_dict, const NameVector &amp; output_names, TF_Status * out_status, PyObjectVector * out_values)'/>
<doc f='tensorflow/tensorflow/python/client/tf_session_helper.cc' l='324'>// Wrapper for TF_PRun that converts the arguments to appropriate types.
// If *out_status is OK, the caller becomes the owner of the PyObjects
// in *out_values.</doc>
<doc f='tensorflow/tensorflow/python/client/tf_session_helper.h' l='100'>// Continue to run the graph with additional feeds and fetches. The
// execution state is uniquely identified by the handle.
//
// The PyObject* feed_dict must be a dictionary mapping strings to
// NumPy arrays. This function does not modify its reference count.
//
// On success,  the tensors corresponding to output_names[0,noutputs-1]
// are placed in out_values[], and these outputs[] become the property
// of the caller (the caller must eventually call Py_DECREF on them).
//
// On failure,  out_status contains a tensorflow::Status with an error
// message.</doc>
