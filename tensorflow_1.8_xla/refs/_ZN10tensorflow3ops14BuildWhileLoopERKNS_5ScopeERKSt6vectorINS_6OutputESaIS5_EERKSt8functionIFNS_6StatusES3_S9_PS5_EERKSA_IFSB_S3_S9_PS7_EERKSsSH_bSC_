<dec f='tensorflow/tensorflow/cc/ops/while_loop.h' l='65' type='tensorflow::Status tensorflow::ops::BuildWhileLoop(const tensorflow::Scope &amp; scope, const std::vector&lt;Output&gt; &amp; inputs, const CondGraphBuilderFn &amp; cond, const BodyGraphBuilderFn &amp; body, const string &amp; frame_name, OutputList * outputs, bool create_while_ctx = true, tensorflow::Output * cond_output = nullptr)'/>
<use f='tensorflow/tensorflow/c/c_api.cc' l='2381' u='c' c='(anonymousnamespace)::TF_FinishWhileHelper'/>
<doc f='tensorflow/tensorflow/cc/ops/while_loop.h' l='37'>// Constructs a while loop.
//
// Arguments:
// * scope: used to construct the while loop.
// * inputs: the initial values of the loop variables. Must be non-empty.
// * cond: a function that builds the condition graph of the loop. Takes the
//     current loop variables as inputs and returns a scalar boolean Output
//     indicating whether the loop should continue.
// * body: a function that builds the body graph of the loop. Takes the current
//     loop variables as inputs and returns the updated loop variables.
// * frame_name: the frame name to use for this while loop. This should be a
//     unique name. This will be used as a prefix for created operations.
// * outputs: output param that returns final loop variable outputs in non-error
//     case. Must be non-null and empty.
// * create_while_ctx: if true, a WhileContext is created and populated for this
//     loop. See core/graph/while_context.h for more details on
//     WhileContexts. This is set to false for loops used as part of gradient
//     computations, since they&apos;re part of the gradient for a loop in the
//     forward-pass.
//     TODO(skyewm): revisit this. Should we create WhileContexts for all loops,
//     even if we don&apos;t need them?
// * cond_output: if non-null, the output of the predicate is returned. This
//     will always be a LoopCond node.
//
// Returns an error if the while loop could not be fully constructed.
//
// TODO(skyewm): clean up partially-constructed loop in error case
// TODO(skyewm): create public interface to this method</doc>
<use f='tensorflow/tensorflow/cc/framework/while_gradients.cc' l='85' u='c' c='_ZN10tensorflow12_GLOBAL__N_121AddForwardLoopCounterEPNS_12WhileContextERKNS_5ScopeEPNS_6OutputE'/>
<use f='tensorflow/tensorflow/cc/framework/while_gradients.cc' l='124' u='c' c='_ZN10tensorflow12_GLOBAL__N_122AddBackPropLoopCounterEPNS_12WhileContextERKNS_6OutputERKNS_5ScopeEPS3_'/>
<use f='tensorflow/tensorflow/cc/framework/while_gradients.cc' l='171' u='c' c='_ZN10tensorflow12_GLOBAL__N_120AddWhileGradientLoopEPNS_12WhileContextERKSt6vectorINS_6OutputESaIS4_EERKS4_RKNS_5ScopeEPS6_'/>
<def f='tensorflow/tensorflow/cc/ops/while_loop.cc' l='172' ll='247' type='tensorflow::Status tensorflow::ops::BuildWhileLoop(const tensorflow::Scope &amp; scope, const std::vector&lt;Output&gt; &amp; inputs, const CondGraphBuilderFn &amp; cond, const BodyGraphBuilderFn &amp; body, const string &amp; frame_name, OutputList * outputs, bool create_while_ctx = true, tensorflow::Output * cond_output = nullptr)'/>
<doc f='tensorflow/tensorflow/cc/ops/while_loop.cc' l='148'>// A while loop with a single loop variable looks like this:
//
// (output)
//     ^    +---------------+
//     |    | body subgraph +-------------+
//    Exit  +---------------+             |
//      ^    ^                            |
//      |    |                            |
//      Switch&lt;--------+                  v
//        ^            |             NextIteration
//        |     +------+--------+         |
//        +----&gt;| cond subgraph |         |
//        |     +---------------+         |
//       Merge&lt;---------------------------+
//       ^
//       |
//    Enter
//      ^
//      |
//   (input)
//
// If there are multiple loop variables, each of the control flow ops is
// duplicated for each loop variable.
// TODO(skyewm): link to public version of design doc</doc>
