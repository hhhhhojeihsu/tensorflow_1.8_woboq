<def f='tensorflow/tensorflow/core/kernels/tensor_array.h' l='139' ll='156' type='void tensorflow::TensorArray::TensorArray(const string &amp; key, const tensorflow::DataType &amp; dtype, const tensorflow::Tensor &amp; handle, int32 N, const tensorflow::PartialTensorShape &amp; element_shape, bool identical_element_shapes, bool dynamic_size, bool multiple_writes_aggregate, bool is_grad, int32 marked_size, bool clear_after_read)'/>
<doc f='tensorflow/tensorflow/core/kernels/tensor_array.h' l='135'>// Construct a TensorArray for holding Tensors of type &apos;dtype&apos; with
  // &apos;N&apos; elements.  While the underlying storage is a std::vector and
  // can hold more than MAX_INT entries, in practice we do not expect
  // users to construct this many Tensors for storage in a TensorArray.</doc>
<use f='tensorflow/tensorflow/core/kernels/tensor_array_ops.cc' l='205' u='c' c='_ZN10tensorflow13TensorArrayOp17CreateTensorArrayEPNS_15OpKernelContextEPNS_11ResourceMgrEPNS_6TensorEPPNS_11TensorArrayE'/>
<use f='tensorflow/tensorflow/core/kernels/tensor_array_ops.cc' l='333' u='c' c='_ZN10tensorflow17TensorArrayGradOp17CreateTensorArrayEPNS_15OpKernelContextEPNS_11ResourceMgrEPNS_6TensorEPPNS_11TensorArrayE'/>
