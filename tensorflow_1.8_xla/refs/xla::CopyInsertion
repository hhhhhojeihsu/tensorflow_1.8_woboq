<inh f='tensorflow/tensorflow/compiler/xla/service/hlo_pass_interface.h' l='29' c='xla::HloPassInterface'/>
<def f='tensorflow/tensorflow/compiler/xla/service/copy_insertion.h' l='47' ll='65'/>
<size>8</size>
<doc f='tensorflow/tensorflow/compiler/xla/service/copy_insertion.h' l='28'>// Copy insertion is a legalization HLO pass which inserts copies (kCopy
// instructions) to eliminate several kinds of problems in the HLO module.
//
//   (1) Entry parameter or a constant live out of the entry computation.  Entry
//       computation arguments and constants have different lifetimes than the
//       computation result and cannot share the same allocation. Parameters and
//       constants live out of non-entry computations do not need copies.
//
//   (2) Different values which are simultaneously live and which must be held
//       in the same buffer. This can occur in while bodies. Specifically, the
//       while loop state (the arguments to the while instruction) is updated
//       in-place and the update may clobber the value from the previous
//       iteration before the previous value is dead. Computations called from
//       kCall instructions do not need such copies because kCall has no update
//       in-place semantics.
//
//   (3) The buffer set of the root instruction of the entry computation must be
//       unambiguous and distinct. That is, InstructionAliasSet::IsAmbiguous and
//       InstructionAliasSet::IsDistinct return true.</doc>
<fun r='_ZNK3xla13CopyInsertion4nameEv'/>
<fun r='_ZN3xla13CopyInsertion3RunEPNS_9HloModuleE'/>
<fun r='_ZN3xla13CopyInsertion28AddCopiesForBufferAssignmentEPNS_9HloModuleE'/>
<fun r='_ZN3xla13CopyInsertion3RunEPNS_9HloModuleE'/>
<fun r='_ZN3xla13CopyInsertion28AddCopiesForBufferAssignmentEPNS_9HloModuleE'/>
