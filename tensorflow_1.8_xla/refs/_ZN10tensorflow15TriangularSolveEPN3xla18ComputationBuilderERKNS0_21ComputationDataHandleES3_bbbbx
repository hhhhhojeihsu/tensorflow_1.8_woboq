<dec f='tensorflow/tensorflow/compiler/tf2xla/lib/triangular_solve.h' l='60' type='xla::StatusOr&lt;xla::ComputationDataHandle&gt; tensorflow::TriangularSolve(xla::ComputationBuilder * builder, const xla::ComputationDataHandle &amp; a, xla::ComputationDataHandle b, bool left_side, bool lower, bool transpose_a, bool conjugate_a, int64 block_size = 256)'/>
<use f='tensorflow/tensorflow/compiler/tf2xla/kernels/matrix_triangular_solve_op.cc' l='32' u='c' c='_ZN10tensorflow12_GLOBAL__N_123MatrixTriangularSolveOp7CompileEPNS_18XlaOpKernelContextE'/>
<doc f='tensorflow/tensorflow/compiler/tf2xla/lib/triangular_solve.h' l='24'>// Solves systems of linear equations with lower or upper triangular coefficient
// matrices by forward- or back-substitution. Broadcasting along leading
// dimensions, this routine solves one of the matrix systems
//   `op(a) * x = b`,  or `x * op(a) = b`,
// for the variable `x` given `a` and `b`, where `op(a)` is either
//   `op(a) = a`,  or `op(a) = transpose(a)`,  or `op(a) = conj(transpose(a))`.
// That is, the innermost matrices in the output satisfy a scalar system
// depending on the value of the value of (left_side, transpose_a, conjugate_a)
// according to:
//   (F, F, F) =&gt; `output[..., i, k]  a[..., k, j] = b[..., i, j]`,
//   (F, F, T) =&gt; `output[..., i, k] a*[..., k, j] = b[..., i, j]`,
//   (F, T, F) =&gt; `output[..., i, k]  a[..., j, k] = b[..., i, j]`,
//   (F, T, T) =&gt; `output[..., i, k] a*[..., j, k] = b[..., i, j]`,
//   (T, F, F) =&gt; ` a[..., i, k] output[..., k, j] = b[..., i, j]`,
//   (T, F, T) =&gt; `a*[..., i, k] output[..., k, j] = b[..., i, j]`,
//   (T, T, F) =&gt; ` a[..., i, k] output[..., j, k] = b[..., i, j]`,
//   (T, T, T) =&gt; `a*[..., i, k] output[..., j, k] = b[..., i, j]`,
// where * denotes complex conjugation and where the index `k` is summed over.
//
// `a` is a tensor of shape `[..., M, M]` whose innermost 2 dimensions form
// square matrices. If lower is true (false), then the strictly upper (lower)
// triangular part of each innermost matrix in `a` is assumed to be zero and is
// not accessed.
// `b` is a tensor of shape `[..., M, K]` if left_side is true, otherwise a
// tensor of shape `[..., K, M]`.
// `left_side` is a boolean, indicating whether to solve a system of the form
// op(a) * x = b (true) or x * op(a) = b (false).
// `lower` is a boolean, indicating whether the argument `a` is lower-triangular
// (true) or upper-triangular (false).
// `transpose_a` is a boolean indicating whether the matrix `a` is transposed.
// `conjugate_a` is a boolean indicating whether the entries of `a` are complex
// conjugated (independently of whether they are transposed), so that when both
// transpose_a and conjugate_a are true the effect is a Hermitian adjoint.
//
// Uses a blocked algorithm if `block_size` is &gt; 1; if block_size == 1 then no
// blocking is used.</doc>
<use f='tensorflow/tensorflow/compiler/tf2xla/lib/cholesky.cc' l='161' u='c' c='_ZN10tensorflow8CholeskyEPN3xla18ComputationBuilderENS0_21ComputationDataHandleEx'/>
<def f='tensorflow/tensorflow/compiler/tf2xla/lib/triangular_solve.cc' l='32' ll='364' type='xla::StatusOr&lt;xla::ComputationDataHandle&gt; tensorflow::TriangularSolve(xla::ComputationBuilder * builder, const xla::ComputationDataHandle &amp; a, xla::ComputationDataHandle b, bool left_side, bool lower, bool transpose_a, bool conjugate_a, int64 block_size = 256)'/>
<use f='tensorflow/tensorflow/compiler/tf2xla/lib/triangular_solve.cc' l='140' u='c' c='_ZN10tensorflow15TriangularSolveEPN3xla18ComputationBuilderERKNS0_21ComputationDataHandleES3_bbbbx'/>
