<dec f='tensorflow/tensorflow/core/kernels/conditional_accumulator_base.h' l='149' type='void tensorflow::ConditionalAccumulatorBase::FlushUnlocked()'/>
<use f='tensorflow/tensorflow/core/kernels/conditional_accumulator_base.cc' l='94' u='c' c='_ZN10tensorflow26ConditionalAccumulatorBase11TryTakeGradEiPNS_15OpKernelContextESt8functionIFvvEE'/>
<use f='tensorflow/tensorflow/core/kernels/conditional_accumulator_base.cc' l='126' u='c' c='_ZN10tensorflow26ConditionalAccumulatorBase6CancelEPNS_19CancellationManagerEx'/>
<def f='tensorflow/tensorflow/core/kernels/conditional_accumulator_base.cc' l='163' ll='183' type='void tensorflow::ConditionalAccumulatorBase::FlushUnlocked()'/>
<doc f='tensorflow/tensorflow/core/kernels/conditional_accumulator_base.cc' l='160'>/**
 * Try to flush logged, blocked TakeGrad attempts.
 */</doc>
<doc f='tensorflow/tensorflow/core/kernels/conditional_accumulator_base.h' l='140'>// Helper functions to process TakeGrad attempts.
  // FlushUnlocked is called at the end of each TryApplyGrad and TryTakeGrad
  // calls to try to clear the TakeGrad attempts. This in turn calls
  // TryAttemptLocked, which then executes the RunCallback of the logged
  // attempts.
  // Both functions are modeled after core/kernels/queue_base.
  // Note: ApplyGrad attempts never block -- unlike in a queue with limited
  //       capacity, we can always add the newest gradient to our accumulator
  //       (if it is not stale) or drop it silently (if it is stale).</doc>
<use f='tensorflow/tensorflow/core/kernels/typed_conditional_accumulator_base.h' l='68' u='c' c='_ZN10tensorflow31TypedConditionalAccumulatorBase12TryApplyGradExPNS_15OpKernelContextE'/>
