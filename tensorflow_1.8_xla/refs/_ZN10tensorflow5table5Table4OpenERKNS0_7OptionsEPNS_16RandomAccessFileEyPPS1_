<dec f='tensorflow/tensorflow/core/lib/io/table.h' l='47' type='static tensorflow::Status tensorflow::table::Table::Open(const tensorflow::table::Options &amp; options, tensorflow::RandomAccessFile * file, uint64 file_size, tensorflow::table::Table ** table)'/>
<doc f='tensorflow/tensorflow/core/lib/io/table.h' l='37'>// Attempt to open the table that is stored in bytes [0..file_size)
  // of &quot;file&quot;, and read the metadata entries necessary to allow
  // retrieving data from the table.
  //
  // If successful, returns ok and sets &quot;*table&quot; to the newly opened
  // table.  The client should delete &quot;*table&quot; when no longer needed.
  // If there was an error while initializing the table, sets &quot;*table&quot;
  // to NULL and returns a non-ok status.  Does not take ownership of
  // &quot;*file&quot;, but the client must ensure that &quot;file&quot; remains live
  // for the duration of the returned table&apos;s lifetime.</doc>
<def f='tensorflow/tensorflow/core/lib/io/table.cc' l='41' ll='84' type='static tensorflow::Status tensorflow::table::Table::Open(const tensorflow::table::Options &amp; options, tensorflow::RandomAccessFile * file, uint64 size, tensorflow::table::Table ** table)'/>
<use f='tensorflow/tensorflow/core/util/tensor_bundle/tensor_bundle.cc' l='559' u='c' c='_ZN10tensorflowL14MergeOneBundleEPNS_3EnvENS_11StringPieceEPNS_10MergeStateE'/>
<use f='tensorflow/tensorflow/core/util/tensor_bundle/tensor_bundle.cc' l='714' u='c' c='_ZN10tensorflow12BundleReaderC1EPNS_3EnvENS_11StringPieceE'/>
<use f='tensorflow/tensorflow/core/util/tensor_slice_reader.cc' l='82' u='c' c='_ZN10tensorflow10checkpoint26OpenTableTensorSliceReaderERKSsPPNS0_17TensorSliceReader5TableE'/>
