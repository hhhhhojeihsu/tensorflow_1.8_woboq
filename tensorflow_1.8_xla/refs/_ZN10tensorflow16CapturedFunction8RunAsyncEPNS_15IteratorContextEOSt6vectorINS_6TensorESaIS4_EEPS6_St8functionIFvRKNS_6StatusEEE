<dec f='tensorflow/tensorflow/core/kernels/data/captured_function.h' l='86' type='void tensorflow::CapturedFunction::RunAsync(tensorflow::IteratorContext * ctx, std::vector&lt;Tensor&gt; &amp;&amp; args, std::vector&lt;Tensor&gt; * rets, FunctionLibraryRuntime::DoneCallback done)'/>
<def f='tensorflow/tensorflow/core/kernels/data/captured_function.cc' l='315' ll='365' type='void tensorflow::CapturedFunction::RunAsync(tensorflow::IteratorContext * ctx, std::vector&lt;Tensor&gt; &amp;&amp; args, std::vector&lt;Tensor&gt; * rets, FunctionLibraryRuntime::DoneCallback done)'/>
<doc f='tensorflow/tensorflow/core/kernels/data/captured_function.h' l='82'>// Asynchronously runs the captured function on the given `args`, stores
  // the results in `*rets`, and calls the given `done` callback when the
  // function returns. This method takes ownership of the tensors in `args`,
  // in order to be able to deallocate them as early as possible.</doc>
<use f='tensorflow/tensorflow/core/kernels/data/map_and_batch_dataset_op.cc' l='302' u='c' c='_ZN10tensorflow12_GLOBAL__N_120MapAndBatchDatasetOp7Dataset8Iterator20InvokeFunctionLockedEPNS_15IteratorContextExx'/>
<use f='tensorflow/tensorflow/core/kernels/data/parallel_map_dataset_op.cc' l='336' u='c' c='_ZN10tensorflow12_GLOBAL__N_120ParallelMapDatasetOp7Dataset8Iterator20InvokeFunctionLockedEPNS_15IteratorContextE'/>
