<inh f='tensorflow/tensorflow/compiler/xla/service/hlo_ordering.h' l='36' c='xla::HloOrdering'/>
<def f='tensorflow/tensorflow/compiler/xla/service/hlo_ordering.h' l='184' ll='214'/>
<size>152</size>
<doc f='tensorflow/tensorflow/compiler/xla/service/hlo_ordering.h' l='163'>/*
          param
         /     \
      negate   exp
          \    /
           add
*/
// and the following sequence:
//
//  {param, negate, exp, add}
//
// SequentialHloOrdering gives the following executes-before relations:
//   param executes before negate, exp, and add
//   negate executes before exp and add
//   exp executes before add
//   add executes before nothing
// This is more constrained than DependencyHloOrdering in this example because
// negate and exp are ordered (negate before exp). This enables param to share
// the same buffer as exp (param buffer is dead after exp). Generally, this
// ordering enables more buffer sharing (reduced memory usage) because buffer
// interference is reduced relative to DependencyHloOrdering.</doc>
<fun r='_ZN3xla21SequentialHloOrderingC1EPKNS_9HloModuleERKN10tensorflow3gtl7FlatMapIPKNS_14HloComputationESt6vectorIPKNS_14HloInstructionESaISD_EENS4_4hashIS7986748'/>
<fun r='_ZN3xla21SequentialHloOrderingD1Ev'/>
<fun r='_ZNK3xla21SequentialHloOrdering15SequentialOrderERKNS_14HloComputationE'/>
<fun r='_ZNK3xla21SequentialHloOrdering8ToStringEv'/>
<fun r='_ZNK3xla21SequentialHloOrdering31ExecutesBeforeInSameComputationEPKNS_14HloInstructionES3_'/>
<mbr r='xla::SequentialHloOrdering::module_sequence_' o='192' t='const HloModuleSequence'/>
<mbr r='xla::SequentialHloOrdering::order_position_' o='704' t='tensorflow::gtl::FlatMap&lt;const HloInstruction *, int&gt;'/>
