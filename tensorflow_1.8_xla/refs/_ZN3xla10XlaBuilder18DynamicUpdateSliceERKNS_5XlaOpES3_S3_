<dec f='tensorflow/tensorflow/compiler/xla/client/xla_client/xla_builder.h' l='285' type='xla::XlaOp xla::XlaBuilder::DynamicUpdateSlice(const xla::XlaOp &amp; operand, const xla::XlaOp &amp; update, const xla::XlaOp &amp; start_indices)'/>
<doc f='tensorflow/tensorflow/compiler/xla/client/xla_client/xla_builder.h' l='269'>// Enqueues a dynamic update slice operation onto the computation, which
  // updates a slice of &apos;operand&apos; with &apos;update&apos; at dynamic &apos;start_indices&apos;.
  // The shape of &apos;update&apos; determines the shape of the slice of &apos;operand&apos;
  // which is updated.
  // The indices specified in &apos;start_indices&apos; specify the offset of the slice
  // of &apos;operand&apos; which is updated.
  //
  //               update = {10, 11} // calculated at runtime.
  //   [1 2 3]     start  = {1, 1}   // calculated at runtime.  [1 2  3 ]
  //   [4 5 6]  =&gt; DynamicUpdateslice(data, update, start)   =&gt; [4 10 11]
  //   [7 8 9]                                                  [7 8  9 ]
  //
  // The shape of &apos;start_indices&apos; must be rank == 1, with dimension size
  // equal to the rank of the &apos;operand&apos;.
  // Slice index calculations are computed modulo update dimension sizes to
  // prevent dynamic start indices from generating out-of-bound array accesses.</doc>
<def f='tensorflow/tensorflow/compiler/xla/client/xla_client/xla_builder.cc' l='512' ll='528' type='xla::XlaOp xla::XlaBuilder::DynamicUpdateSlice(const xla::XlaOp &amp; operand, const xla::XlaOp &amp; update, const xla::XlaOp &amp; start_indices)'/>
