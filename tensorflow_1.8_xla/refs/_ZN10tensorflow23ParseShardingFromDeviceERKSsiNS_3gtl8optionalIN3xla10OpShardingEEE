<dec f='tensorflow/tensorflow/compiler/tf2xla/sharding_util.h' l='37' type='xla::StatusOr&lt;tensorflow::gtl::optional&lt;xla::OpSharding&gt; &gt; tensorflow::ParseShardingFromDevice(const string &amp; device_name, int num_cores_per_replica, tensorflow::gtl::optional&lt;xla::OpSharding&gt; explicit_sharding = tensorflow::gtl::nullopt)'/>
<def f='tensorflow/tensorflow/compiler/tf2xla/sharding_util.cc' l='53' ll='80' type='xla::StatusOr&lt;tensorflow::gtl::optional&lt;xla::OpSharding&gt; &gt; tensorflow::ParseShardingFromDevice(const string &amp; device_name, int num_cores_per_replica, tensorflow::gtl::optional&lt;xla::OpSharding&gt; explicit_sharding = tensorflow::gtl::nullopt)'/>
<use f='tensorflow/tensorflow/compiler/tf2xla/sharding_util.cc' l='87' u='c' c='_ZN10tensorflow23ParseShardingFromDeviceERKNS_7NodeDefEi'/>
<use f='tensorflow/tensorflow/compiler/tf2xla/sharding_util.cc' l='98' u='c' c='_ZN10tensorflow23ParseShardingFromDeviceERKNS_4NodeEi'/>
<doc f='tensorflow/tensorflow/compiler/tf2xla/sharding_util.h' l='27'>// Parses the op sharding from the &apos;replicated core&apos; device_name &lt;device_name&gt;.
// Returns an error:
// - if the device name is invalid.
// - the core is parsed and is out of the range [0, num_cores_per_replica).
//
// Otherwise, returns either:
// - explicit_sharding if explicit_sharding.has_value()
// - a non-value if there is no assigned core or
// - a sharding set as per xla::sharding_builder::AssignDevice.</doc>
