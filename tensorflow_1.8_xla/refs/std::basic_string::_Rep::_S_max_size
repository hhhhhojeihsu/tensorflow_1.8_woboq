<dec f='include/c++/5/bits/basic_string.h' l='2570' type='const size_type'/>
<def f='include/c++/5/bits/basic_string.tcc' l='492' ll='495' type='const typename basic_string&lt;_CharT, _Traits, _Alloc&gt;::size_type'/>
<use f='include/c++/5/bits/basic_string.tcc' l='995' c='_ZNSt12basic_string4_Rep9_S_createENT1_6rebindIT_E5other9size_typeES5_RKS1_'/>
<use f='include/c++/5/bits/basic_string.tcc' l='1044' c='_ZNSt12basic_string4_Rep9_S_createENT1_6rebindIT_E5other9size_typeES5_RKS1_'/>
<use f='include/c++/5/bits/basic_string.tcc' l='1045' u='r' c='_ZNSt12basic_string4_Rep9_S_createENT1_6rebindIT_E5other9size_typeES5_RKS1_'/>
<doc f='include/c++/5/bits/basic_string.h' l='2557'>// (Public) Data members:

	// The maximum number of individual char_type elements of an
	// individual string is determined by _S_max_size. This is the
	// value that will be returned by max_size().  (Whereas npos
	// is the maximum number of bytes the allocator can allocate.)
	// If one was to divvy up the theoretical largest size string,
	// with a terminating character and m _CharT elements, it&apos;d
	// look like this:
	// npos = sizeof(_Rep) + (m * sizeof(_CharT)) + sizeof(_CharT)
	// Solving for m:
	// m = ((npos - sizeof(_Rep))/sizeof(CharT)) - 1
	// In addition, this implementation quarters this amount.</doc>
