<dec f='tensorflow/tensorflow/compiler/xla/service/hlo_instruction.h' l='417' type='static std::unique_ptr&lt;HloInstruction&gt; xla::HloInstruction::CreateBroadcastSequence(const xla::Shape &amp; output_shape, xla::HloInstruction * operand, const std::function&lt;HloInstruction *(std::unique_ptr&lt;HloInstruction&gt;)&gt; &amp; adder)'/>
<doc f='tensorflow/tensorflow/compiler/xla/service/hlo_instruction.h' l='408'>// Creates a sequence of instructions that performs an explicit broadcast of
  // the operand to the target shape.
  //
  // Interior HLOs are passed to &quot;adder&quot;, but the &quot;root&quot; HLO of the sequence is
  // returned as a unique_ptr for API consistency with other factory methods in
  // this interface.
  //
  // TODO(b/72173833) Ideally HloComputations would always be present, and so
  // the adder being passed by the caller would not be necessary.</doc>
<use f='tensorflow/tensorflow/compiler/xla/service/algebraic_simplifier.cc' l='1856' u='c' c='_ZN3xla26AlgebraicSimplifierVisitor18HandleReduceWindowEPNS_14HloInstructionE'/>
<def f='tensorflow/tensorflow/compiler/xla/service/hlo_instruction.cc' l='695' ll='745' type='static std::unique_ptr&lt;HloInstruction&gt; xla::HloInstruction::CreateBroadcastSequence(const xla::Shape &amp; output_shape, xla::HloInstruction * operand, const std::function&lt;HloInstruction *(std::unique_ptr&lt;HloInstruction&gt;)&gt; &amp; adder)'/>
<doc f='tensorflow/tensorflow/compiler/xla/service/hlo_instruction.cc' l='695'>/* static */</doc>
<use f='tensorflow/tensorflow/compiler/xla/service/user_computation.cc' l='2859' u='c' c='_ZN3xla12_GLOBAL__N_118ComputationLowerer36ImplicitBroadcastToExplicitBroadcastEPNS_14HloInstructionERKNS_5ShapeE'/>
